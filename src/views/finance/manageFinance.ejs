<%- include('../partials/header') %>

<% const intervalOptionsFallback = [
    { value: 'weekly', label: 'Semanal' },
    { value: 'biweekly', label: 'Quinzenal' },
    { value: 'monthly', label: 'Mensal' },
    { value: 'quarterly', label: 'Trimestral' },
    { value: 'yearly', label: 'Anual' }
]; %>
<% const intervalOptionsSource = (typeof recurringIntervalOptions !== 'undefined' && Array.isArray(recurringIntervalOptions))
    ? recurringIntervalOptions
    : ((typeof locals !== 'undefined' && locals && Array.isArray(locals.recurringIntervalOptions))
        ? locals.recurringIntervalOptions
        : intervalOptionsFallback);
%>
<% const intervalOptions = intervalOptionsSource; %>
<% const computedPeriodLabel = (typeof periodLabel === 'string' && periodLabel.trim())
    ? periodLabel.trim()
    : 'Todo o período'; %>
<% const defaultFilters = {
    startDate: '',
    endDate: '',
    type: '',
    status: '',
    investmentPeriodMonths: '',
    investmentContribution: '',
    investmentContributionFrequency: ''
}; %>
<% const rawFilters = (typeof filters !== 'undefined' && filters && typeof filters === 'object') ? filters : {}; %>
<% const filterValues = { ...defaultFilters, ...rawFilters }; %>
<% const ejsLocals = (typeof locals !== 'undefined' && locals) ? locals : {}; %>
<% const defaultBudgetPageUrl = '/finance/budgets'; %>
<% const resolvedBudgetPageUrl = (typeof budgetPageUrl === 'string' && budgetPageUrl.trim())
    ? budgetPageUrl.trim()
    : defaultBudgetPageUrl; %>
<% const defaultSummaryTotals = {
    receivable: 0,
    payable: 0,
    net: 0,
    overdue: 0,
    paid: 0,
    pending: 0
}; %>
<% const summaryTotalsSource = (typeof financeTotals === 'object' && financeTotals) ? financeTotals : {}; %>
<% const summaryTotals = { ...defaultSummaryTotals, ...summaryTotalsSource }; %>
<% summaryTotals.net = Number(summaryTotals.receivable || 0) - Number(summaryTotals.payable || 0); %>
<% const intlCurrencyFormatter = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }); %>
<% const formatCurrencyFn = (typeof ejsLocals.formatCurrency === 'function')
    ? ejsLocals.formatCurrency
    : (value) => intlCurrencyFormatter.format(Number(value) || 0); %>
<% const formatCurrency = formatCurrencyFn; %>
<% const netAmount = Number(summaryTotals.net || 0); %>
<% const netClass = netAmount > 0 ? 'text-success' : netAmount < 0 ? 'text-danger' : 'text-muted'; %>
<% const defaultMonthlySummary = []; %>
<% const monthlySummaryList = (typeof monthlySummary !== 'undefined' && Array.isArray(monthlySummary) && monthlySummary.length)
    ? monthlySummary
    : defaultMonthlySummary; %>
<% const hasMonthlySummary = monthlySummaryList.length > 0; %>
<% const summaryMonthly = monthlySummaryList; %>
<% const defaultStatusSummary = {
    receivable: {},
    payable: {}
}; %>
<% const statusSummaryData = (typeof statusSummary !== 'undefined' && typeof statusSummary === 'object' && statusSummary)
    ? statusSummary
    : defaultStatusSummary; %>
<% const summaryStatus = {
    payable: statusSummaryData.payable || {},
    receivable: statusSummaryData.receivable || {}
}; %>
<% const statusLabels = {
    pending: 'Pendente',
    paid: 'Pago',
    overdue: 'Atrasado',
    cancelled: 'Cancelado'
}; %>
<% const statusKeys = Object.keys(statusLabels); %>
<% const typeLabels = {
    receivable: 'Receber',
    payable: 'Pagar'
}; %>
<% const contributionFrequencyLabels = {
    monthly: 'Mensal',
    quarterly: 'Trimestral',
    yearly: 'Anual',
    weekly: 'Semanal'
}; %>
<% const safeProjectionList =
    (typeof projectionList !== 'undefined' && Array.isArray(projectionList))
        ? projectionList
        : ((typeof financeProjections !== 'undefined' && Array.isArray(financeProjections)) ? financeProjections : []);
%>
<% const safeAlertsList =
    (typeof alertsList !== 'undefined' && Array.isArray(alertsList))
        ? alertsList
        : ((typeof projectionAlerts !== 'undefined' && Array.isArray(projectionAlerts)) ? projectionAlerts : []);
%>
<% const goalSummaryData = (typeof goalSummary !== 'undefined' && goalSummary)
    ? goalSummary
    : ((typeof financeGoalSummary !== 'undefined' && financeGoalSummary) ? financeGoalSummary : null); %>
<% const financeGoalsList = (typeof financeGoals !== 'undefined' && Array.isArray(financeGoals))
    ? financeGoals
    : ((typeof goals !== 'undefined' && Array.isArray(goals)) ? goals : []); %>
<% const currentHighlightProjection =
    (typeof highlightProjection !== 'undefined' && highlightProjection)
        || (typeof projectionHighlight !== 'undefined' ? projectionHighlight : null);
%>
<% const rawImportPreview =
    (typeof financeImportPreview !== 'undefined' && financeImportPreview)
        || (typeof pendingImportPreview !== 'undefined' && pendingImportPreview)
        || (typeof locals !== 'undefined' && locals && locals.importPreview)
        || null; %>
<% const importPreviewTotalsDefaults = { new: 0, conflicting: 0, total: 0 }; %>
<% const importPreview = (rawImportPreview && typeof rawImportPreview === 'object') ? rawImportPreview : {}; %>
<% const previewEntries = Array.isArray(importPreview.entries) ? importPreview.entries : []; %>
<% const previewTotals = importPreview.totals && typeof importPreview.totals === 'object'
    ? { ...importPreviewTotalsDefaults, ...importPreview.totals }
    : importPreviewTotalsDefaults; %>
<% const previewWarnings = Array.isArray(importPreview.warnings) ? importPreview.warnings : []; %>
<% const previewUploadedAt = importPreview.uploadedAt || new Date().toISOString(); %>
<% const hasImportPreview = previewEntries.length > 0; %>
<% const formatMonthLabel = (value) => {
    if (!value) {
        return '';
    }

    const safeValue = String(value);
    const isoDate = `${safeValue}-01T00:00:00`;
    const parsedDate = new Date(isoDate);

    if (Number.isFinite(parsedDate.getTime())) {
        return parsedDate.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });
    }

    const parts = safeValue.split('-');
    if (parts.length === 2) {
        return `${parts[1]}/${parts[0]}`;
    }

    return safeValue;
}; %>
<% const providedBudgetCards = (typeof budgetCards !== 'undefined' && Array.isArray(budgetCards))
    ? budgetCards
    : ((typeof locals !== 'undefined' && locals && Array.isArray(locals.budgetCards)) ? locals.budgetCards : []); %>
<% const budgetSummariesSource = (typeof budgetSummaries !== 'undefined')
    ? budgetSummaries
    : ((typeof locals !== 'undefined' && locals && locals.budgetSummaries) ? locals.budgetSummaries : []); %>
<% const rawBudgetData = providedBudgetCards.length
    ? providedBudgetCards
    : (Array.isArray(budgetSummariesSource)
        ? budgetSummariesSource
        : (budgetSummariesSource && Array.isArray(budgetSummariesSource.summaries) ? budgetSummariesSource.summaries : [])); %>
<% const budgetMonthsSource = (typeof budgetMonths !== 'undefined')
    ? budgetMonths
    : ((typeof locals !== 'undefined' && locals && locals.budgetMonths) ? locals.budgetMonths : []); %>
<% const budgetMonthList = Array.isArray(budgetMonthsSource)
    ? budgetMonthsSource
    : Array.from(new Set(rawBudgetData.map((item) => item.month))).sort((a, b) => (a < b ? -1 : a > b ? 1 : 0)); %>
<% const categoryConsumptionSource = (typeof categoryConsumption !== 'undefined')
    ? categoryConsumption
    : ((typeof locals !== 'undefined' && locals && locals.categoryConsumption) ? locals.categoryConsumption : []); %>
<% const categoryConsumptionList = Array.isArray(categoryConsumptionSource)
    ? categoryConsumptionSource
    : (budgetSummariesSource && Array.isArray(budgetSummariesSource.categoryConsumption) ? budgetSummariesSource.categoryConsumption : []); %>
<% const budgetStatusPaletteSource = (typeof budgetStatusPalette !== 'undefined' && budgetStatusPalette && typeof budgetStatusPalette === 'object')
    ? budgetStatusPalette
    : ((typeof locals !== 'undefined' && locals && typeof locals.budgetStatusPalette === 'object') ? locals.budgetStatusPalette : null); %>
<% const budgetStatusSource = budgetStatusPaletteSource
    || ((typeof budgetStatusMeta !== 'undefined' && budgetStatusMeta && typeof budgetStatusMeta === 'object')
        ? budgetStatusMeta
        : ((typeof locals !== 'undefined' && locals && typeof locals.budgetStatusMeta === 'object') ? locals.budgetStatusMeta : {})); %>
<% const defaultBudgetStatus = {
    healthy: { key: 'healthy', label: 'Consumo saudável', badgeClass: 'bg-success-subtle text-success', icon: 'bi-emoji-smile', barColor: '#10b981' },
    caution: { key: 'caution', label: 'Consumo moderado', badgeClass: 'bg-primary-subtle text-primary', icon: 'bi-activity', barColor: '#2563eb' },
    warning: { key: 'warning', label: 'Atenção ao consumo', badgeClass: 'bg-warning-subtle text-warning', icon: 'bi-exclamation-triangle-fill', barColor: '#f59e0b' },
    critical: { key: 'critical', label: 'Limite excedido', badgeClass: 'bg-danger-subtle text-danger', icon: 'bi-fire', barColor: '#ef4444' }
}; %>
<% const resolveBudgetStatusStyle = (statusKey) => {
    const fallback = defaultBudgetStatus[statusKey] || defaultBudgetStatus.healthy;
    const source = budgetStatusSource && budgetStatusSource[statusKey] ? budgetStatusSource[statusKey] : {};
    return {
        ...fallback,
        ...source,
        badgeClass: source.badgeClass || fallback.badgeClass,
        barColor: source.barColor || fallback.barColor,
        label: source.label || fallback.label,
        icon: source.icon || fallback.icon
    };
}; %>
<% const resolveThresholdPreview = (threshold, item) => {
    const limit = Number(item.monthlyLimit || 0);
    const consumption = Number(item.consumption || 0);
    const numericThreshold = Number(threshold || 0);
    const percentage = limit > 0 ? (numericThreshold / limit) * 100 : null;
    const reached = consumption >= numericThreshold && numericThreshold > 0;
    let statusKey = 'healthy';

    if (Number.isFinite(percentage) && percentage >= 100) {
        statusKey = reached ? 'critical' : 'warning';
    } else if (reached) {
        statusKey = 'warning';
    } else if (Number.isFinite(percentage) && percentage >= 85) {
        statusKey = 'warning';
    } else if (Number.isFinite(percentage) && percentage >= 60) {
        statusKey = 'caution';
    }

    const statusStyle = resolveBudgetStatusStyle(statusKey);
    return {
        badgeClass: statusStyle.badgeClass,
        icon: reached ? 'bi-check-circle-fill' : 'bi-flag-fill',
        percentage: Number.isFinite(percentage) ? percentage : null,
        label: statusStyle.label
    };
}; %>
<% const investmentSimulationData =
    (typeof investmentSimulation !== 'undefined' && investmentSimulation)
        ? investmentSimulation
        : ((typeof locals !== 'undefined' && locals && locals.investmentSimulation)
            ? locals.investmentSimulation
            : null); %>
<% const investmentSimulationItems = (typeof investmentSimulationCategories !== 'undefined'
        && Array.isArray(investmentSimulationCategories))
    ? investmentSimulationCategories
    : (Array.isArray(investmentSimulationData?.categories) ? investmentSimulationData.categories : []); %>
<% const investmentSimulationTotalsData = (typeof investmentSimulationTotals !== 'undefined'
        && investmentSimulationTotals)
    ? investmentSimulationTotals
    : ((investmentSimulationData && investmentSimulationData.totals) || null); %>
<% const investmentSimulationOptions = investmentSimulationData?.options || {}; %>
<% let investmentSimulationGeneratedAt = investmentSimulationData?.generatedAt
    ? new Date(investmentSimulationData.generatedAt)
    : new Date(); %>
<% if (!Number.isFinite(investmentSimulationGeneratedAt.getTime())) { investmentSimulationGeneratedAt = new Date(); } %>
<% const investmentSimulationHorizon = investmentSimulationOptions.defaultPeriodMonths
    || (investmentSimulationItems.length ? investmentSimulationItems[0].periodMonths : filterValues.investmentPeriodMonths)
    || 0; %>
<% const globalThresholdDefaults = {
    overdueDays: 0,
    spendingAlertPercent: 0,
    netGoalFloor: 0
}; %>
<% const thresholdSource = (typeof financeThresholds !== 'undefined' && financeThresholds && typeof financeThresholds === 'object')
    ? financeThresholds
    : ((typeof ejsLocals.financeThresholds !== 'undefined' && ejsLocals.financeThresholds && typeof ejsLocals.financeThresholds === 'object')
        ? ejsLocals.financeThresholds
        : {});
%>
<% const normalizeThresholdNumber = (value, fallback) => {
    const numeric = Number(value);
    return Number.isFinite(numeric) ? numeric : fallback;
}; %>
<% const globalThresholds = {
    overdueDays: normalizeThresholdNumber(thresholdSource.overdueDays, globalThresholdDefaults.overdueDays),
    spendingAlertPercent: normalizeThresholdNumber(thresholdSource.spendingAlertPercent, globalThresholdDefaults.spendingAlertPercent),
    netGoalFloor: normalizeThresholdNumber(thresholdSource.netGoalFloor, globalThresholdDefaults.netGoalFloor)
}; %>
<% const thresholdsJson = JSON.stringify(globalThresholds); %>
<% const thresholdsEndpoint = (typeof financeThresholdsEndpoint === 'string' && financeThresholdsEndpoint.trim())
    ? financeThresholdsEndpoint.trim()
    : '/finance/thresholds';
%>
<% const resolvedCsrfToken = (typeof csrfToken === 'string' && csrfToken)
    ? csrfToken
    : ((typeof ejsLocals.csrfToken === 'string' && ejsLocals.csrfToken) ? ejsLocals.csrfToken : '');
%>
<% const normalizedBudgetData = rawBudgetData.map((item) => {
    const statusStyle = resolveBudgetStatusStyle(item.status || item.statusMeta?.key || item.statusStyle?.key || 'healthy');
    const usage = Number.isFinite(Number(item.usage))
        ? Number(item.usage)
        : (Number.isFinite(Number(item.percentage)) ? Number(item.percentage) : 0);
    const consumption = Number(item.consumption || 0);
    const limit = Number(item.monthlyLimit || 0);
    const remaining = Number.isFinite(Number(item.remaining)) ? Number(item.remaining) : (limit - consumption);
    const thresholds = Array.isArray(item.thresholds) ? item.thresholds : [];
    return {
        ...item,
        usage,
        percentage: usage,
        consumption,
        monthlyLimit: limit,
        remaining,
        thresholds,
        statusStyle
    };
}); %>
<% const allBudgetStatusKeys = Array.from(new Set([
    ...Object.keys(defaultBudgetStatus),
    ...Object.keys(budgetStatusSource || {})
])); %>
<% const clientBudgetStatusMeta = allBudgetStatusKeys.reduce((acc, key) => {
    acc[key] = resolveBudgetStatusStyle(key);
    return acc;
}, {}); %>
<% const computedBudgetMonths = budgetMonthList.length ? budgetMonthList : Array.from(new Set(normalizedBudgetData.map((item) => item.month))).sort((a, b) => (a < b ? -1 : a > b ? 1 : 0)); %>
<% const activeBudgetMonth = computedBudgetMonths.length ? computedBudgetMonths[computedBudgetMonths.length - 1] : null; %>
<% const activeBudgetData = normalizedBudgetData.filter((item) => !activeBudgetMonth || item.month === activeBudgetMonth); %>
<% const activeBudgetConsumption = activeBudgetData.reduce((acc, item) => acc + (Number(item.consumption) || 0), 0); %>
<% const activeBudgetLimit = activeBudgetData.reduce((acc, item) => acc + (Number(item.monthlyLimit) || 0), 0); %>
<% const activeBudgetUsage = activeBudgetLimit > 0 ? ((activeBudgetConsumption / activeBudgetLimit) * 100) : 0; %>

<datalist id="recurring-interval-options">
    <% intervalOptions.forEach((option) => { %>
        <option value="<%= option.value %>"><%= option.label %></option>
    <% }) %>
</datalist>

<div class="row fade-in responsive-page-row gy-4">
    <div class="col-12">
        <div class="card card-soft responsive-panel">
            <div class="d-flex flex-column flex-lg-row align-items-lg-center justify-content-between gap-3">
                <div>
                    <span class="app-chip mb-2"><i class="bi bi-cash-stack me-2"></i>Saúde financeira</span>
                    <h2 class="fw-semibold mb-2">Gerenciar finanças estratégicas</h2>
                    <p class="text-muted mb-0">
                        Acompanhe lançamentos, status e recorrências com visibilidade completa para decisões rápidas.
                    </p>
                </div>
                <div class="text-muted small text-lg-end">
                    Lançamentos cadastrados<br />
                    <span class="fw-semibold text-primary"><%= entries.length %></span>
                </div>
            </div>

            <% if (success_msg) { %>
                <div class="alert alert-success alert-auto mt-4" data-auto-dismiss="5000">
                    <i class="bi bi-check-circle me-2"></i><%= success_msg %>
                </div>
            <% } else if (error_msg) { %>
                <div class="alert alert-danger alert-auto mt-4" data-auto-dismiss="5000">
                    <i class="bi bi-exclamation-triangle me-2"></i><%= error_msg %>
                </div>
            <% } %>
        </div>
    </div>

    <div class="col-12">
        <div class="card card-soft responsive-panel" data-quick-metrics>
            <div class="d-flex flex-column flex-xl-row justify-content-between align-items-start align-items-xl-center gap-4">
                <div>
                    <h3 class="fw-semibold mb-2">Visão rápida de resultados</h3>
                    <p class="text-muted mb-0">Indicadores consolidados para acompanhar recebimentos, pagamentos e saldo projetado.</p>
                </div>
                <div class="d-flex flex-wrap gap-2">
                    <a class="btn btn-outline-primary" href="<%= resolvedBudgetPageUrl %>">
                        <i class="bi bi-kanban me-2" aria-hidden="true"></i>
                        Abrir painel de orçamentos
                    </a>
                </div>
            </div>

            <div class="row row-cols-1 row-cols-sm-2 row-cols-xl-4 g-3 mt-4">
                <div class="col">
                    <div class="border rounded-4 px-4 py-3 h-100 shadow-sm bg-light-subtle">
                        <span class="text-muted small d-block">A receber</span>
                        <span class="fs-4 fw-semibold d-block"><%= formatCurrency(summaryTotals.receivable) %></span>
                    </div>
                </div>
                <div class="col">
                    <div class="border rounded-4 px-4 py-3 h-100 shadow-sm bg-light-subtle">
                        <span class="text-muted small d-block">A pagar</span>
                        <span class="fs-4 fw-semibold d-block"><%= formatCurrency(summaryTotals.payable) %></span>
                    </div>
                </div>
                <div class="col">
                    <div class="border rounded-4 px-4 py-3 h-100 shadow-sm bg-light-subtle">
                        <span class="text-muted small d-block">Saldo projetado</span>
                        <span class="fs-4 fw-semibold d-block <%= netClass %>"><%= formatCurrency(summaryTotals.net) %></span>
                    </div>
                </div>
                <div class="col">
                    <div class="border rounded-4 px-4 py-3 h-100 shadow-sm bg-light-subtle">
                        <span class="text-muted small d-block">Em atraso</span>
                        <span class="fs-4 fw-semibold d-block text-warning"><%= formatCurrency(summaryTotals.overdue) %></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-12">
        <div class="card card-soft responsive-panel" data-thresholds-container>
            <div class="d-flex flex-column flex-xl-row justify-content-between align-items-start align-items-xl-center gap-4">
                <div>
                    <h3 class="fw-semibold mb-1">Limites e alertas globais</h3>
                    <p class="text-muted mb-0">Configure limites de atraso, consumo e objetivo mínimo para antecipar riscos financeiros.</p>
                </div>
                <div class="text-muted small">
                    Ajuste os indicadores para alinhar alertas automáticos com a estratégia da empresa.
                </div>
            </div>

            <form
                action="<%= thresholdsEndpoint %>"
                method="POST"
                class="mt-4"
                data-thresholds-form
                data-endpoint="<%= thresholdsEndpoint %>"
                data-method="PATCH"
                data-initial-thresholds="<%= thresholdsJson %>"
                novalidate
            >
                <input type="hidden" name="_csrf" value="<%= resolvedCsrfToken %>" />

                <div class="row g-4">
                    <div class="col-12 col-md-6 col-xl-4">
                        <div class="border rounded-4 p-4 h-100 shadow-sm bg-white">
                            <div class="d-flex align-items-start justify-content-between gap-3 mb-3">
                                <div>
                                    <h4 class="h6 fw-semibold mb-1">Prazo máximo de atraso</h4>
                                    <p class="text-muted small mb-0">Número de dias até que um lançamento seja considerado crítico.</p>
                                </div>
                                <span class="badge rounded-circle bg-light text-muted p-3 d-flex align-items-center justify-content-center">
                                    <i class="bi bi-alarm" aria-hidden="true"></i>
                                </span>
                            </div>
                            <div class="mb-3">
                                <label class="form-label text-muted small" for="threshold-overdue-days">Dias até alerta</label>
                                <div class="input-group">
                                    <input
                                        type="number"
                                        class="form-control"
                                        id="threshold-overdue-days"
                                        name="overdueDays"
                                        value="<%= globalThresholds.overdueDays %>"
                                        min="0"
                                        step="1"
                                        required
                                        data-threshold-input
                                        data-threshold-field="overdueDays"
                                    />
                                    <span class="input-group-text">dias</span>
                                </div>
                            </div>
                            <p class="text-muted small mb-0">Alerta utilizado para destacar pendências com maior urgência.</p>
                        </div>
                    </div>

                    <div class="col-12 col-md-6 col-xl-4">
                        <div class="border rounded-4 p-4 h-100 shadow-sm bg-white">
                            <div class="d-flex align-items-start justify-content-between gap-3 mb-3">
                                <div>
                                    <h4 class="h6 fw-semibold mb-1">Alerta de consumo</h4>
                                    <p class="text-muted small mb-0">Percentual que dispara avisos de gasto próximo do limite.</p>
                                </div>
                                <span class="badge rounded-circle bg-light text-muted p-3 d-flex align-items-center justify-content-center">
                                    <i class="bi bi-graph-up" aria-hidden="true"></i>
                                </span>
                            </div>
                            <div class="mb-3">
                                <label class="form-label text-muted small" for="threshold-spending-percent">Percentual de alerta</label>
                                <div class="input-group">
                                    <input
                                        type="number"
                                        class="form-control"
                                        id="threshold-spending-percent"
                                        name="spendingAlertPercent"
                                        value="<%= globalThresholds.spendingAlertPercent %>"
                                        min="0"
                                        max="100"
                                        step="1"
                                        required
                                        data-percent-mask
                                        data-threshold-input
                                        data-threshold-field="spendingAlertPercent"
                                    />
                                    <span class="input-group-text">%</span>
                                </div>
                            </div>
                            <p class="text-muted small mb-0">Permite visualizar categorias que ultrapassam o consumo planejado.</p>
                        </div>
                    </div>

                    <div class="col-12 col-md-6 col-xl-4">
                        <div class="border rounded-4 p-4 h-100 shadow-sm bg-white">
                            <div class="d-flex align-items-start justify-content-between gap-3 mb-3">
                                <div>
                                    <h4 class="h6 fw-semibold mb-1">Meta mínima de saldo</h4>
                                    <p class="text-muted small mb-0">Valor mínimo de caixa projetado para manter a operação saudável.</p>
                                </div>
                                <span class="badge rounded-circle bg-light text-muted p-3 d-flex align-items-center justify-content-center">
                                    <i class="bi bi-piggy-bank" aria-hidden="true"></i>
                                </span>
                            </div>
                            <div class="mb-3">
                                <label class="form-label text-muted small" for="threshold-net-goal-floor">Valor mínimo</label>
                                <div class="input-group">
                                    <span class="input-group-text">R$</span>
                                    <input
                                        type="number"
                                        class="form-control"
                                        id="threshold-net-goal-floor"
                                        name="netGoalFloor"
                                        value="<%= globalThresholds.netGoalFloor %>"
                                        min="0"
                                        step="0.01"
                                        required
                                        data-threshold-input
                                        data-threshold-field="netGoalFloor"
                                    />
                                </div>
                            </div>
                            <p class="text-muted small mb-0">Utilizado para avisar quando o saldo projetado cair abaixo do limite.</p>
                        </div>
                    </div>
                </div>

                <div class="visually-hidden" data-thresholds-live aria-live="polite"></div>
                <div class="alert alert-info border-0 shadow-sm d-none mt-4 mb-0" role="status" data-thresholds-feedback></div>

                <div class="d-flex flex-wrap gap-2 mt-4">
                    <button type="reset" class="btn btn-outline-secondary btn-sm" data-thresholds-reset>Restaurar padrão</button>
                    <button type="submit" class="btn btn-gradient btn-sm" data-thresholds-submit>Salvar limites</button>
                </div>
            </form>
        </div>
    </div>

    <div class="col-12">
        <div class="card card-soft responsive-panel">
            <div class="d-flex flex-column flex-xl-row justify-content-between align-items-xl-center gap-4 mb-4">
                <div class="flex-grow-1">
                    <h3 class="fw-semibold mb-1">Orçamentos por categoria</h3>
                    <p class="text-muted mb-0">Acompanhe limites mensais e identifique rapidamente categorias em risco.</p>
                </div>
                <div class="d-flex flex-column flex-sm-row align-items-sm-end gap-4 w-100 w-xl-auto">
                    <div class="d-flex flex-sm-column gap-3 gap-sm-2 flex-grow-1 flex-sm-grow-0">
                        <div>
                            <span class="text-muted small d-block">Consumo no período</span>
                            <span class="fs-5 fw-semibold" data-budget-summary="consumption"><%= formatCurrency(activeBudgetConsumption) %></span>
                        </div>
                        <div>
                            <span class="text-muted small d-block">Limite disponível</span>
                            <span class="fs-5 fw-semibold" data-budget-summary="limit"><%= formatCurrency(activeBudgetLimit) %></span>
                        </div>
                        <div>
                            <span class="text-muted small d-block">Utilização média</span>
                            <span class="fs-5 fw-semibold" data-budget-summary="usage"><%= activeBudgetUsage.toFixed(1) %>%</span>
                        </div>
                    </div>
                    <div class="w-100 w-sm-auto">
                        <label class="form-label text-muted small mb-1" for="budget-month-filter">Mês de referência</label>
                        <select class="form-select form-select-sm" id="budget-month-filter" data-budget-month-selector>
                            <option value="all">Todos os meses</option>
                            <% computedBudgetMonths.forEach((month) => { %>
                                <option value="<%= month %>" <%= month === activeBudgetMonth ? 'selected' : '' %>>
                                    <%= formatMonthLabel(month) %>
                                </option>
                            <% }) %>
                        </select>
                    </div>
                </div>
            </div>

            <div class="row g-4 align-items-stretch" data-budget-overview>
                <div class="col-12">
                    <div class="alert d-none align-items-center gap-2" data-budget-feedback role="alert" aria-live="polite"></div>
                </div>
                <div class="col-12 col-xl-8">
                    <div class="row g-4" data-budget-grid>
                        <% if (!normalizedBudgetData.length) { %>
                            <div class="col-12">
                                <div class="alert alert-info border-0 shadow-sm mb-0" role="alert">
                                    <i class="bi bi-info-circle me-2" aria-hidden="true"></i>
                                    Cadastre orçamentos para visualizar indicadores por categoria.
                                </div>
                            </div>
                        <% } else { %>
                            <% normalizedBudgetData.forEach((item, index) => { %>
                                <div
                                    class="col-12 col-md-6"
                                    data-budget-card
                                    data-budget-index="<%= index %>"
                                    data-budget-month="<%= item.month %>"
                                    data-budget-id="<%= item.budgetId || item.id || '' %>"
                                    data-budget-category="<%= item.categoryId || '' %>"
                                >
                                    <div class="h-100 border rounded-4 p-4 shadow-sm position-relative">
                                        <div class="d-flex justify-content-between align-items-start gap-3 mb-3">
                                            <div class="d-flex align-items-start gap-3">
                                                <span
                                                    class="rounded-circle flex-shrink-0"
                                                    style="width: 12px; height: 12px; background:<%= item.categoryColor || '#6b7280' %>;"
                                                    aria-hidden="true"
                                                ></span>
                                                <div>
                                                    <h4 class="h6 fw-semibold mb-1 text-truncate"><%= item.categoryName %></h4>
                                                    <span class="badge bg-light text-muted fw-normal text-uppercase small px-2 py-1">
                                                        <%= formatMonthLabel(item.month) %>
                                                    </span>
                                                </div>
                                            </div>
                                            <span
                                                class="badge <%= item.statusStyle.badgeClass %> d-inline-flex align-items-center gap-1"
                                                data-budget-status-badge
                                                data-status-key="<%= item.statusStyle.key || item.status || 'healthy' %>"
                                            >
                                                <i class="bi <%= item.statusStyle.icon %>" aria-hidden="true"></i>
                                                <span data-budget-status-label><%= item.statusStyle.label %></span>
                                            </span>
                                        </div>
                                        <div class="mb-4">
                                            <div class="progress bg-light rounded-pill" style="height: 8px;">
                                                <div
                                                    class="progress-bar"
                                                    data-budget-progress
                                                    role="progressbar"
                                                    style="width: <%= Math.min(item.usage, 130).toFixed(1) %>%; background:<%= item.statusStyle.barColor %>;"
                                                    aria-valuenow="<%= item.usage.toFixed(1) %>"
                                                    aria-valuemin="0"
                                                    aria-valuemax="150"
                                                ></div>
                                            </div>
                                            <div class="d-flex justify-content-between text-muted small mt-2">
                                                <span>Consumido</span>
                                                <span data-budget-field="consumption"><%= formatCurrency(item.consumption) %></span>
                                            </div>
                                        </div>
                                        <div class="d-flex flex-wrap gap-3 text-sm">
                                            <div>
                                                <span class="text-muted small d-block">Limite</span>
                                                <span class="fw-semibold" data-budget-field="limit"><%= formatCurrency(item.monthlyLimit) %></span>
                                            </div>
                                            <div>
                                                <span class="text-muted small d-block">Disponível</span>
                                                <span
                                                    class="fw-semibold <%= item.remaining < 0 ? 'text-danger' : 'text-success' %>"
                                                    data-budget-field="remaining"
                                                    data-positive-class="text-success"
                                                    data-negative-class="text-danger"
                                                >
                                                    <%= formatCurrency(item.remaining) %>
                                                </span>
                                            </div>
                                            <div>
                                                <span class="text-muted small d-block">Utilização</span>
                                                <span class="fw-semibold" data-budget-field="usage"><%= item.usage.toFixed(1) %>%</span>
                                            </div>
                                        </div>
                                        <% if (item.budgetId) { %>
                                            <div class="mt-4" data-threshold-container>
                                                <div class="d-flex justify-content-between align-items-center flex-wrap gap-2 mb-2">
                                                    <div>
                                                        <span class="text-muted small d-block">Alertas de consumo</span>
                                                        <span class="text-muted small">Ajuste os limites para antecipar excessos.</span>
                                                    </div>
                                                    <button type="button" class="btn btn-outline-secondary btn-sm" data-threshold-toggle aria-expanded="false">
                                                        <i class="bi bi-pencil-square me-1" aria-hidden="true"></i>
                                                        Ajustar limites
                                                    </button>
                                                </div>
                                                <div class="d-flex flex-wrap gap-2 align-items-center" data-threshold-badges>
                                                    <% if (!item.thresholds.length) { %>
                                                        <span class="badge bg-light text-muted" data-threshold-empty>Sem limites cadastrados</span>
                                                    <% } else { %>
                                                        <% item.thresholds.forEach((threshold) => { %>
                                                            <% const badgeMeta = resolveThresholdPreview(threshold, item); %>
                                                            <span class="badge <%= badgeMeta.badgeClass %> d-inline-flex align-items-center gap-1">
                                                                <i class="bi <%= badgeMeta.icon %>" aria-hidden="true"></i>
                                                                <span>
                                                                    <%= formatCurrency(Number(threshold)) %>
                                                                    <% if (badgeMeta.percentage !== null) { %>
                                                                        (<%= Math.round(badgeMeta.percentage) %>%)
                                                                    <% } %>
                                                                </span>
                                                            </span>
                                                        <% }) %>
                                                    <% } %>
                                                </div>
                                                <div class="visually-hidden" data-threshold-live aria-live="polite"></div>
                                                <div class="alert alert-danger d-none mt-3 mb-0 py-2 px-3" role="status" data-threshold-feedback></div>
                                                <form class="threshold-inline-form d-none mt-3" data-threshold-form novalidate>
                                                    <div class="small text-muted mb-2">Valores são comparados com o limite mensal definido para o orçamento.</div>
                                                    <div data-threshold-inputs></div>
                                                    <div class="d-flex flex-wrap gap-2 mt-3">
                                                        <button type="button" class="btn btn-outline-secondary btn-sm" data-threshold-cancel>Cancelar</button>
                                                        <button type="submit" class="btn btn-gradient btn-sm">Salvar limites</button>
                                                        <button type="button" class="btn btn-link btn-sm text-decoration-none" data-threshold-add>
                                                            <i class="bi bi-plus-circle me-1" aria-hidden="true"></i>
                                                            Adicionar limite
                                                        </button>
                                                    </div>
                                                </form>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                            <% }) %>
                        <% } %>
                    </div>
                </div>
                <div class="col-12 col-xl-4">
                    <div class="h-100 border rounded-4 p-4 shadow-sm bg-light-subtle">
                        <h4 class="h6 fw-semibold mb-3">Distribuição por categoria</h4>
                        <canvas id="budget-consumption-chart" height="220" class="w-100 mb-4"></canvas>
                        <div class="list-group list-group-flush small" data-category-consumption-list>
                            <% if (!categoryConsumptionList.length) { %>
                                <div class="text-muted">Nenhum consumo registrado para o período filtrado.</div>
                            <% } else { %>
                                <% categoryConsumptionList.slice(0, 6).forEach((category) => { %>
                                    <div class="list-group-item px-0 d-flex justify-content-between align-items-center gap-3">
                                        <div class="d-flex align-items-center gap-3">
                                            <span
                                                class="rounded-circle flex-shrink-0"
                                                style="width: 10px; height: 10px; background:<%= category.categoryColor || '#6b7280' %>;"
                                                aria-hidden="true"
                                            ></span>
                                            <div>
                                                <div class="fw-semibold text-truncate"><%= category.categoryName %></div>
                                                <div class="text-muted small">
                                                    Média: <%= category.averagePercentage.toFixed(1) %>% · Pico: <%= category.highestPercentage.toFixed(1) %>%
                                                </div>
                                            </div>
                                        </div>
                                        <div class="text-end">
                                            <div class="fw-semibold"><%= formatCurrency(category.totalConsumption) %></div>
                                            <div class="text-muted small"><%= category.months %> mês(es)</div>
                                        </div>
                                    </div>
                                <% }) %>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-12 col-xxl-8">
        <div class="card card-soft responsive-panel">
            <div class="card-body">
                <div class="d-flex flex-column flex-lg-row justify-content-between gap-3 mb-3">
                    <div>
                        <h3 class="fw-semibold mb-1">Metas e projeções</h3>
                        <p class="text-muted mb-0">Acompanhe se o saldo projetado atende as metas mensais configuradas.</p>
                    </div>
                    <div class="text-lg-end">
                        <span class="badge rounded-pill bg-light text-muted me-2">
                            <i class="bi bi-calendar-week me-1"></i>
                            <%= safeProjectionList.length %> períodos monitorados
                        </span>
                        <span class="badge rounded-pill <%= goalSummaryData && goalSummaryData.alerts ? 'bg-warning-subtle text-warning' : 'bg-success-subtle text-success' %>">
                            <i class="bi bi-bullseye me-1"></i>
                            <%= goalSummaryData && goalSummaryData.alerts ? `${goalSummaryData.alerts} meta(s) em atenção` : 'Metas sob controle' %>
                        </span>
                    </div>
                </div>

                <% if (safeAlertsList.length) { %>
                    <div class="alert alert-warning border-0 d-flex align-items-center gap-2" role="alert">
                        <i class="bi bi-exclamation-triangle-fill"></i>
                        <span>
                            <strong><%= safeAlertsList.length %></strong>
                            <%= safeAlertsList.length === 1 ? 'meta' : 'metas' %> com projeção abaixo do objetivo.
                        </span>
                    </div>
                <% } %>

                <div class="projection-highlight border rounded-3 p-3 bg-light-subtle mb-3">
                    <% if (currentHighlightProjection) { %>
                        <% const highlightGoal = currentHighlightProjection.goal || {}; %>
                        <% const highlightGap = (typeof highlightGoal.gapToGoal === 'number') ? highlightGoal.gapToGoal : null; %>
                        <% const gapLabel = highlightGap !== null ? `${highlightGap >= 0 ? '+' : '-'}${currencyFormatter.format(Math.abs(highlightGap))}` : '—'; %>
                        <% const gapClass = highlightGap !== null ? (highlightGap >= 0 ? 'text-success' : 'text-danger') : 'text-muted'; %>
                        <% const statusClass = highlightGoal.achieved === true ? 'badge bg-success-subtle text-success' : highlightGoal.achieved === false ? 'badge bg-danger-subtle text-danger' : 'badge bg-secondary-subtle text-secondary'; %>
                        <div class="d-flex flex-wrap align-items-center justify-content-between gap-3">
                            <div>
                                <p class="text-muted small mb-1">Próxima meta monitorada</p>
                                <h4 class="fw-semibold mb-0"><%= currentHighlightProjection.label || currentHighlightProjection.month %></h4>
                            </div>
                            <div class="text-end">
                                <div class="fw-semibold"><%= currencyFormatter.format(Number(currentHighlightProjection.projected?.net || 0)) %></div>
                                <div class="text-muted small">
                                    Meta: <span class="fw-semibold"><%= highlightGoal.targetNetAmount !== null && highlightGoal.targetNetAmount !== undefined ? currencyFormatter.format(Number(highlightGoal.targetNetAmount)) : '—' %></span>
                                </div>
                                <div class="text-muted small">
                                    Diferença: <span class="fw-semibold <%= gapClass %>"><%= gapLabel %></span>
                                </div>
                                <span class="<%= statusClass %>">
                                    <%= highlightGoal.achieved === true ? 'Meta atingida' : highlightGoal.achieved === false ? 'Meta em risco' : 'Meta registrada' %>
                                </span>
                            </div>
                        </div>
                    <% } else { %>
                        <p class="text-muted small mb-0">Cadastre uma meta mensal para visualizar projeções detalhadas.</p>
                    <% } %>
                </div>

                <div class="table-responsive table-modern responsive-table">
                    <table class="table table-sm align-middle mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>Mês</th>
                                <th>Saldo projetado</th>
                                <th>Meta líquida</th>
                                <th>Diferença</th>
                                <th class="text-center">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                <% if (!safeProjectionList.length) { %>
                    <tr>
                        <td colspan="5" class="text-center text-muted small">Nenhuma projeção disponível.</td>
                    </tr>
                <% } else { %>
                    <% safeProjectionList.forEach((item) => { %>
                        <% const goal = item.goal || {}; %>
                                    <% const gapValue = (typeof goal.gapToGoal === 'number') ? goal.gapToGoal : null; %>
                                    <% const gapLabel = gapValue !== null ? `${gapValue >= 0 ? '+' : '-'}${currencyFormatter.format(Math.abs(gapValue))}` : '—'; %>
                                    <% const gapClass = gapValue !== null ? (gapValue >= 0 ? 'text-success' : 'text-danger') : 'text-muted'; %>
                                    <% const rowClass = item.needsAttention ? 'table-warning' : (item.isCurrent ? 'table-active' : ''); %>
                                    <% const statusLabel = goal.achieved === true ? 'Meta atingida' : goal.achieved === false ? 'Meta em risco' : goal.targetNetAmount !== null && goal.targetNetAmount !== undefined ? 'Meta registrada' : 'Sem meta'; %>
                                    <% const statusClass = goal.achieved === true ? 'badge bg-success-subtle text-success' : goal.achieved === false ? 'badge bg-danger-subtle text-danger' : goal.targetNetAmount !== null && goal.targetNetAmount !== undefined ? 'badge bg-secondary-subtle text-secondary' : 'badge bg-light text-muted'; %>
                                    <tr class="<%= rowClass %>">
                                        <td><%= item.label || item.month %></td>
                                        <td><%= currencyFormatter.format(Number(item.projected?.net || 0)) %></td>
                                        <td><%= goal.targetNetAmount !== null && goal.targetNetAmount !== undefined ? currencyFormatter.format(Number(goal.targetNetAmount)) : '—' %></td>
                                        <td class="<%= gapClass %>"><%= gapLabel %></td>
                                        <td class="text-center"><span class="<%= statusClass %>"><%= statusLabel %></span></td>
                                    </tr>
                                <% }) %>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="col-12 col-xxl-4">
        <div class="card card-soft responsive-panel h-100">
            <div class="card-body">
                <h4 class="fw-semibold mb-3">Configurar metas mensais</h4>
                <form action="/finance/goals" method="POST" class="row g-3">
                    <div class="col-12">
                        <label class="form-label">Mês da meta</label>
                        <input type="month" class="form-control" name="month" value="<%= currentHighlightProjection ? currentHighlightProjection.month : '' %>" required />
                    </div>
                    <div class="col-12">
                        <label class="form-label">Saldo líquido desejado (R$)</label>
                        <input type="number" step="0.01" min="0" class="form-control" name="targetNetAmount" placeholder="Ex.: 15000" required />
                    </div>
                    <div class="col-12">
                        <label class="form-label">Notas (opcional)</label>
                        <textarea class="form-control" name="notes" rows="2" maxlength="255" placeholder="Reforços ou observações"></textarea>
                    </div>
                    <div class="col-12 d-flex justify-content-end gap-2">
                        <button type="reset" class="btn btn-outline-secondary btn-sm">Limpar</button>
                        <button type="submit" class="btn btn-gradient btn-sm">Salvar meta</button>
                    </div>
                </form>

                <hr class="my-4" />

                <h5 class="fw-semibold mb-3">Metas cadastradas</h5>
                <% if (!financeGoalsList.length) { %>
                    <p class="text-muted small mb-0">Nenhuma meta cadastrada até o momento.</p>
                <% } else { %>
                    <div class="list-group list-group-flush">
                        <% financeGoalsList.forEach((goal) => { %>
                            <div class="list-group-item px-0">
                                <div class="d-flex flex-column gap-2">
                                    <div class="d-flex justify-content-between align-items-start gap-3">
                                        <div>
                                            <h6 class="fw-semibold mb-1"><%= goal.monthLabel %></h6>
                                            <p class="text-muted small mb-1">Meta: <span class="fw-semibold"><%= goal.formattedAmount %></span></p>
                                            <% if (goal.notes) { %>
                                                <p class="text-muted small mb-0"><i class="bi bi-chat-left-text me-1"></i><%= goal.notes %></p>
                                            <% } %>
                                        </div>
                                        <div class="d-flex gap-2">
                                            <button class="btn btn-outline-primary btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#goalEdit<%= goal.id %>" aria-expanded="false" aria-controls="goalEdit<%= goal.id %>">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <form action="/finance/goals/<%= goal.id %>?_method=DELETE" method="POST" class="d-inline">
                                                <button class="btn btn-outline-danger btn-sm" type="submit">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                    <div class="collapse" id="goalEdit<%= goal.id %>">
                                        <form action="/finance/goals" method="POST" class="row g-3 mt-2">
                                            <input type="hidden" name="goalId" value="<%= goal.id %>" />
                                            <div class="col-12">
                                                <label class="form-label">Mês</label>
                                                <input type="month" class="form-control" name="month" value="<%= goal.monthKey %>" required />
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label">Meta líquida (R$)</label>
                                                <input type="number" step="0.01" min="0" class="form-control" name="targetNetAmount" value="<%= goal.targetNetAmountInput %>" required />
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label">Notas</label>
                                                <textarea class="form-control" name="notes" rows="2" maxlength="255"><%= goal.notes %></textarea>
                                            </div>
                                            <div class="col-12 d-flex justify-content-end gap-2">
                                                <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-toggle="collapse" data-bs-target="#goalEdit<%= goal.id %>">Cancelar</button>
                                                <button type="submit" class="btn btn-gradient btn-sm">Atualizar meta</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <% if (hasImportPreview) { %>
    <div class="col-12">
        <div class="card card-soft responsive-panel">
            <div class="d-flex flex-wrap justify-content-between align-items-center gap-3 mb-3">
                <div>
                    <h3 class="fw-semibold mb-1">Lançamentos recentes</h3>
                    <p class="text-muted mb-0">Monitoramento contínuo de receitas, despesas e recorrências.</p>
                </div>
                <div class="card-body">
                    <div class="d-flex flex-column flex-md-row align-items-md-center justify-content-between gap-3 mb-3">
                        <div class="d-flex flex-wrap gap-2">
                            <span class="badge rounded-pill bg-success-subtle text-success-emphasis">
                                <i class="bi bi-plus-circle me-1" aria-hidden="true"></i>
                                <strong><%= previewTotals.new %></strong> novo(s)
                            </span>
                            <span class="badge rounded-pill bg-warning-subtle text-warning-emphasis">
                                <i class="bi bi-exclamation-circle me-1" aria-hidden="true"></i>
                                <strong><%= previewTotals.conflicting %></strong> conflito(s)
                            </span>
                            <span class="badge rounded-pill bg-secondary-subtle text-secondary-emphasis">
                                <i class="bi bi-list-check me-1" aria-hidden="true"></i>
                                <strong><%= previewTotals.total %></strong> registro(s)
                            </span>
                        </div>
                        <div class="text-muted small">
                            Ajuste as informações ou desmarque lançamentos conflitantes antes de importar.
                        </div>
                    </div>

                    <% if (previewWarnings.length) { %>
                        <div class="alert alert-warning shadow-sm" role="alert">
                            <div class="d-flex align-items-start gap-3">
                                <i class="bi bi-info-circle fs-4" aria-hidden="true"></i>
                                <div>
                                    <h6 class="fw-semibold mb-2">Avisos de leitura</h6>
                                    <ul class="list-unstyled mb-0 small">
                                        <% previewWarnings.forEach(function(warning) { %>
                                            <li><i class="bi bi-dot me-1"></i><%= warning %></li>
                                        <% }); %>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    <% } %>

                    <form action="/finance/import/commit" method="POST" class="mt-4">
                        <div class="table-responsive table-modern responsive-table">
                            <table class="table align-middle mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th class="text-center">Importar</th>
                                        <th>Descrição</th>
                                        <th class="text-center">Tipo</th>
                                        <th>Valor (R$)</th>
                                        <th>Vencimento</th>
                                        <th>Pagamento</th>
                                        <th>Status</th>
                                        <th>Origem</th>
                                        <th class="text-center">Situação</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% previewEntries.forEach(function(entry, index) { %>
                                        <% const conflictReasons = Array.isArray(entry.conflictReasons) ? entry.conflictReasons : []; %>
                                        <tr class="<%= entry.conflict ? 'table-warning' : '' %>">
                                            <td class="text-center">
                                                <div class="form-check form-switch d-inline-flex align-items-center justify-content-center">
                                                    <input
                                                        class="form-check-input"
                                                        type="checkbox"
                                                        name="entries[<%= index %>][include]"
                                                        value="1"
                                                        id="importEntry<%= index %>"
                                                        <%= entry.include ? 'checked' : '' %>
                                                    />
                                                </div>
                                                <input type="hidden" name="entries[<%= index %>][hash]" value="<%= entry.hash %>" />
                                            </td>
                                            <td>
                                                <input
                                                    type="text"
                                                    class="form-control form-control-sm"
                                                    name="entries[<%= index %>][description]"
                                                    value="<%= entry.description %>"
                                                    required
                                                />
                                            </td>
                                            <td class="text-center">
                                                <select class="form-select form-select-sm" name="entries[<%= index %>][type]" required>
                                                    <option value="payable" <%= entry.type === 'payable' ? 'selected' : '' %>>Pagar</option>
                                                    <option value="receivable" <%= entry.type === 'receivable' ? 'selected' : '' %>>Receber</option>
                                                </select>
                                            </td>
                                            <td>
                                                <div class="input-group input-group-sm">
                                                    <span class="input-group-text">R$</span>
                                                    <input
                                                        type="number"
                                                        class="form-control"
                                                        name="entries[<%= index %>][value]"
                                                        step="0.01"
                                                        min="0"
                                                        value="<%= Number(entry.value || 0).toFixed(2) %>"
                                                        required
                                                    />
                                                </div>
                                            </td>
                                            <td>
                                                <input
                                                    type="date"
                                                    class="form-control form-control-sm"
                                                    name="entries[<%= index %>][dueDate]"
                                                    value="<%= entry.dueDate %>"
                                                    required
                                                />
                                            </td>
                                            <td>
                                                <input
                                                    type="date"
                                                    class="form-control form-control-sm"
                                                    name="entries[<%= index %>][paymentDate]"
                                                    value="<%= entry.paymentDate ? entry.paymentDate : '' %>"
                                                />
                                            </td>
                                            <td>
                                                <select class="form-select form-select-sm" name="entries[<%= index %>][status]">
                                                    <option value="pending" <%= entry.status === 'pending' ? 'selected' : '' %>>Pendente</option>
                                                    <option value="paid" <%= entry.status === 'paid' ? 'selected' : '' %>>Pago</option>
                                                    <option value="overdue" <%= entry.status === 'overdue' ? 'selected' : '' %>>Em atraso</option>
                                                    <option value="cancelled" <%= entry.status === 'cancelled' ? 'selected' : '' %>>Cancelado</option>
                                                </select>
                                            </td>
                                            <td class="text-muted small">
                                                <% if (entry.metadata && entry.metadata.source) { %>
                                                    <span class="badge rounded-pill bg-secondary-subtle text-secondary-emphasis"><%= entry.metadata.source.toUpperCase() %></span>
                                                <% } %>
                                                <% if (entry.metadata && entry.metadata.line) { %>
                                                    <div>Linha <%= entry.metadata.line %></div>
                                                <% } else if (entry.metadata && entry.metadata.index) { %>
                                                    <div>Registro <%= entry.metadata.index %></div>
                                                <% } %>
                                            </td>
                                            <td class="text-center">
                                                <% if (conflictReasons.length) { %>
                                                    <span class="badge bg-warning-subtle text-warning-emphasis d-inline-flex align-items-center gap-2 mb-2">
                                                        <i class="bi bi-exclamation-triangle" aria-hidden="true"></i>
                                                        Conflito
                                                    </span>
                                                    <div class="small text-muted text-start">
                                                        <% conflictReasons.forEach(function(reason) { %>
                                                            <div><i class="bi bi-dot"></i><%= reason %></div>
                                                        <% }); %>
                                                    </div>
                                                <% } else { %>
                                                    <span class="badge bg-success-subtle text-success-emphasis d-inline-flex align-items-center gap-2">
                                                        <i class="bi bi-check-circle" aria-hidden="true"></i>
                                                        Novo
                                                    </span>
                                                <% } %>
                                            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                        <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mt-4">
                            <div class="text-muted small">
                                Importação preparada em <%= new Date(previewUploadedAt).toLocaleString('pt-BR') %>.<br />
                                <span class="fw-semibold"><%= previewTotals.new %></span> lançamento(s) pronto(s) para importação.
                            </div>
                            <div class="d-flex flex-wrap gap-2">
                                <a href="/finance" class="btn btn-outline-secondary btn-sm">
                                    <i class="bi bi-x-circle me-1" aria-hidden="true"></i>
                                    Cancelar prévia
                                </a>
                                <button type="submit" class="btn btn-primary btn-sm">
                                    <i class="bi bi-cloud-arrow-down me-2" aria-hidden="true"></i>
                                    Importar lançamentos selecionados
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    <% } %>

    <div class="col-12">
        <div class="card card-soft responsive-panel">
            <div class="d-flex flex-column gap-4">
                <div>
                    <div class="d-flex flex-column flex-xl-row justify-content-between align-items-start gap-3 mb-3">
                        <div>
                            <span class="app-chip mb-2"><i class="bi bi-funnel me-2"></i>Filtros inteligentes</span>
                            <h3 class="fw-semibold mb-1">Visão consolidada</h3>
                            <p class="text-muted mb-0">
                                Período analisado: <span class="fw-semibold"><%= computedPeriodLabel %></span>
                            </p>
                        </div>
                        <div class="text-muted small">
                            Ajuste período, aportes e filtros de lançamentos para refinar a análise e exportações.
                        </div>
                    </div>
                    <form
                        class="row g-3 align-items-end responsive-filter-grid"
                        data-filter-form
                        action="/finance"
                        method="GET"
                        novalidate
                    >
                        <div class="col-12 col-sm-6 col-lg-3 col-xxl-2">
                            <label class="form-label" for="filterStartDate">Início</label>
                            <input
                                type="date"
                                class="form-control"
                                id="filterStartDate"
                                name="startDate"
                                value="<%= filterValues.startDate || '' %>"
                            />
                        </div>
                        <div class="col-12 col-sm-6 col-lg-3 col-xxl-2">
                            <label class="form-label" for="filterEndDate">Fim</label>
                            <input
                                type="date"
                                class="form-control"
                                id="filterEndDate"
                                name="endDate"
                                value="<%= filterValues.endDate || '' %>"
                            />
                        </div>
                        <div class="col-12 col-sm-6 col-lg-3 col-xxl-2">
                            <label class="form-label" for="filterType">Tipo</label>
                            <select
                                class="form-select"
                                id="filterType"
                                name="type"
                                data-auto-submit="true"
                            >
                                <option value="" <%= filterValues.type ? '' : 'selected' %>>Todos</option>
                                <option value="payable" <%= filterValues.type === 'payable' ? 'selected' : '' %>>A pagar</option>
                                <option value="receivable" <%= filterValues.type === 'receivable' ? 'selected' : '' %>>A receber</option>
                            </select>
                        </div>
                        <div class="col-12 col-sm-6 col-lg-3 col-xxl-2">
                            <label class="form-label" for="filterStatus">Status</label>
                            <select
                                class="form-select"
                                id="filterStatus"
                                name="status"
                                data-auto-submit="true"
                            >
                                <option value="" <%= filterValues.status ? '' : 'selected' %>>Todos</option>
                                <option value="pending" <%= filterValues.status === 'pending' ? 'selected' : '' %>>Pendente</option>
                                <option value="paid" <%= filterValues.status === 'paid' ? 'selected' : '' %>>Pago</option>
                                <option value="overdue" <%= filterValues.status === 'overdue' ? 'selected' : '' %>>Atrasado</option>
                                <option value="cancelled" <%= filterValues.status === 'cancelled' ? 'selected' : '' %>>Cancelado</option>
                            </select>
                        </div>
                        <div class="col-12 col-sm-6 col-lg-3 col-xxl-2">
                            <label class="form-label" for="investmentPeriodMonths">Período (meses)</label>
                            <input
                                type="number"
                                min="1"
                                step="1"
                                class="form-control"
                                id="investmentPeriodMonths"
                                name="investmentPeriodMonths"
                                value="<%= filterValues.investmentPeriodMonths || '' %>"
                                data-auto-submit="true"
                            />
                        </div>
                        <div class="col-12 col-sm-6 col-lg-3 col-xxl-2">
                            <label class="form-label" for="investmentContribution">Aporte mensal (R$)</label>
                            <input
                                type="number"
                                min="0"
                                step="0.01"
                                inputmode="decimal"
                                class="form-control"
                                id="investmentContribution"
                                name="investmentContribution"
                                value="<%= filterValues.investmentContribution || '' %>"
                            />
                        </div>
                        <div class="col-12 col-sm-6 col-lg-3 col-xxl-2">
                            <label class="form-label" for="investmentContributionFrequency">Freq. de aporte</label>
                            <select
                                class="form-select"
                                id="investmentContributionFrequency"
                                name="investmentContributionFrequency"
                            >
                                <% Object.entries(contributionFrequencyLabels).forEach(([key, label]) => { %>
                                    <option value="<%= key %>" <%= filterValues.investmentContributionFrequency === key ? 'selected' : '' %>>
                                        <%= label %>
                                    </option>
                                <% }) %>
                            </select>
                        </div>
                        <div class="col-12 col-xl-4 col-xxl-4 ms-auto">
                            <div class="d-flex flex-column flex-sm-row justify-content-end gap-2">
                                <button type="button" class="btn btn-outline-secondary w-100 w-sm-auto" data-filter-clear>
                                    Limpar
                                </button>
                                <button type="submit" class="btn btn-gradient w-100 w-sm-auto">
                                    Aplicar filtros
                                </button>
                            </div>
                        </div>
                    </form>
                </div>

                <div class="row g-4">
                    <div class="col-sm-6 col-xl-3">
                        <div class="card border-0 shadow-sm h-100">
                            <div class="card-body">
                                <div class="d-flex align-items-center justify-content-between mb-3">
                                    <span class="badge rounded-pill bg-success-subtle text-success">Receitas</span>
                                    <i class="bi bi-arrow-up-right-circle text-success fs-4" aria-hidden="true"></i>
                                </div>
                                <h4 class="fw-semibold mb-1"><%= formatCurrency(summaryTotals.receivable) %></h4>
                                <p class="text-muted small mb-0">Entradas previstas no período selecionado.</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 col-xl-3">
                        <div class="card border-0 shadow-sm h-100">
                            <div class="card-body">
                                <div class="d-flex align-items-center justify-content-between mb-3">
                                    <span class="badge rounded-pill bg-danger-subtle text-danger">Despesas</span>
                                    <i class="bi bi-arrow-down-right-circle text-danger fs-4" aria-hidden="true"></i>
                                </div>
                                <h4 class="fw-semibold mb-1"><%= formatCurrency(summaryTotals.payable) %></h4>
                                <p class="text-muted small mb-0">Saídas planejadas dentro do período.</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 col-xl-3">
                        <div class="card border-0 shadow-sm h-100">
                            <div class="card-body">
                                <div class="d-flex align-items-center justify-content-between mb-3">
                                    <span class="badge rounded-pill bg-primary-subtle text-primary">Saldo</span>
                                    <i class="bi bi-wallet2 text-primary fs-4" aria-hidden="true"></i>
                                </div>
                                <h4 class="fw-semibold mb-1 <%= netClass %>"><%= formatCurrency(summaryTotals.net) %></h4>
                                <p class="text-muted small mb-0">Resultado projetado após receitas e despesas.</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 col-xl-3">
                        <div class="card border-0 shadow-sm h-100">
                            <div class="card-body">
                                <div class="d-flex align-items-center justify-content-between mb-3">
                                    <span class="badge rounded-pill bg-warning-subtle text-warning">Riscos</span>
                                    <i class="bi bi-exclamation-octagon text-warning fs-4" aria-hidden="true"></i>
                                </div>
                                <h4 class="fw-semibold mb-1 text-warning"><%= formatCurrency(summaryTotals.overdue) %></h4>
                                <p class="text-muted small mb-0">Pagamentos em atraso demandando atenção imediata.</p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card border-0 shadow-sm">
                    <div class="card-body d-flex flex-column gap-3">
                        <div class="d-flex flex-wrap justify-content-between align-items-start gap-3">
                            <div>
                                <h4 class="fw-semibold mb-1">Simulação de investimentos</h4>
                                <p class="text-muted small mb-0">Projeções de juros simples e compostos por categoria financeira.</p>
                            </div>
                            <div class="text-muted small text-end">
                                <div>Horizonte: <span class="fw-semibold"><%= investmentSimulationHorizon || '—' %></span> meses</div>
                                <div>Atualizado em <%= investmentSimulationGeneratedAt.toLocaleString('pt-BR') %></div>
                            </div>
                        </div>

                        <% if (investmentSimulationItems.length) { %>
                            <div class="table-responsive">
                                <table class="table table-sm align-middle mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th scope="col">Categoria</th>
                                            <th scope="col" class="text-end">Principal</th>
                                            <th scope="col" class="text-end">Aporte mensal</th>
                                            <th scope="col" class="text-end">Futuro (simples)</th>
                                            <th scope="col" class="text-end">Futuro (composto)</th>
                                            <th scope="col" class="text-end">Diferença</th>
                                            <th scope="col" class="text-center">Origem</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% investmentSimulationItems.forEach((item) => { %>
                                            <% const delta = (item.compound?.futureValue || 0) - (item.simple?.futureValue || 0); %>
                                            <tr>
                                                <td class="fw-semibold"><%= item.categoryName %></td>
                                                <td class="text-end"><%= formatCurrency(item.principal || 0) %></td>
                                                <td class="text-end"><%= formatCurrency(item.monthlyContribution || 0) %></td>
                                                <td class="text-end"><%= formatCurrency(item.simple?.futureValue || 0) %></td>
                                                <td class="text-end"><%= formatCurrency(item.compound?.futureValue || 0) %></td>
                                                <td class="text-end <%= delta >= 0 ? 'text-success' : 'text-danger' %>"><%= formatCurrency(delta) %></td>
                                                <td class="text-center">
                                                    <% if (item.rateSource === 'user') { %>
                                                        <span class="badge text-bg-primary">Personalizada</span>
                                                    <% } else { %>
                                                        <span class="badge text-bg-secondary">Padrão</span>
                                                    <% } %>
                                                </td>
                                            </tr>
                                        <% }) %>
                                    </tbody>
                                </table>
                            </div>

                            <div class="row g-3">
                                <div class="col-12 col-md-4">
                                    <div class="bg-light rounded-3 p-3 h-100">
                                        <div class="text-muted small">Investimento inicial</div>
                                        <div class="fw-semibold fs-5"><%= formatCurrency(investmentSimulationTotalsData?.principal || 0) %></div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-4">
                                    <div class="bg-light rounded-3 p-3 h-100">
                                        <div class="text-muted small">Aportes acumulados</div>
                                        <div class="fw-semibold fs-5"><%= formatCurrency(investmentSimulationTotalsData?.contributions || 0) %></div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-4">
                                    <div class="bg-light rounded-3 p-3 h-100">
                                        <div class="text-muted small">Ganho adicional estimado</div>
                                        <div class="fw-semibold fs-5 text-primary"><%= formatCurrency(investmentSimulationTotalsData?.interestDelta || 0) %></div>
                                    </div>
                                </div>
                            </div>
                        <% } else { %>
                            <p class="text-muted small mb-0">
                                Cadastre taxas de juros nas categorias financeiras para visualizar projeções de investimento personalizadas.
                            </p>
                        <% } %>
                    </div>
                </div>

                <div class="row g-4 align-items-stretch">
                    <div class="col-12 col-lg-7">
                        <div class="card border-0 shadow-sm h-100">
                            <div class="card-body d-flex flex-column">
                                <div class="d-flex flex-wrap justify-content-between align-items-start gap-3 mb-3">
                                    <div>
                                        <h4 class="fw-semibold mb-1">Performance mensal</h4>
                                        <p class="text-muted small mb-0">Comparativo de entradas e saídas para decisões estratégicas.</p>
                                    </div>
                                    <span class="badge rounded-pill bg-light text-muted"><%= computedPeriodLabel %></span>
                                </div>
                                <div class="ratio ratio-16x9">
                                    <canvas
                                        id="financePerformanceChart"
                                        aria-label="Gráfico de desempenho financeiro mensal"
                                        role="img"
                                    ></canvas>
                                </div>
                                <% if (hasMonthlySummary) { %>
                                    <div class="table-responsive small mt-4">
                                        <table class="table table-sm align-middle mb-0">
                                            <thead>
                                                <tr>
                                                    <th scope="col">Mês</th>
                                                    <th scope="col" class="text-end">A receber</th>
                                                    <th scope="col" class="text-end">A pagar</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% summaryMonthly.forEach((item) => { %>
                                                    <tr>
                                                        <td><%= formatMonthLabel(item.month) %></td>
                                                        <td class="text-end"><%= formatCurrency(item.receivable) %></td>
                                                        <td class="text-end"><%= formatCurrency(item.payable) %></td>
                                                    </tr>
                                                <% }) %>
                                            </tbody>
                                        </table>
                                    </div>
                                <% } else { %>
                                    <p class="text-muted small mt-4 mb-0">
                                        Cadastre lançamentos ou ajuste os filtros para visualizar tendências históricas.
                                    </p>
                                <% } %>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-5">
                        <div class="card border-0 shadow-sm h-100">
                            <div class="card-body d-flex flex-column">
                                <div class="d-flex flex-wrap justify-content-between align-items-start gap-3 mb-3">
                                    <div>
                                        <h4 class="fw-semibold mb-1">Status por categoria</h4>
                                        <p class="text-muted small mb-0">Distribuição de valores em cada etapa.</p>
                                    </div>
                                    <span class="badge rounded-pill bg-light text-muted">Atualizado em tempo real</span>
                                </div>
                                <div class="table-responsive">
                                    <table class="table table-sm align-middle mb-3">
                                        <thead>
                                            <tr>
                                                <th scope="col">Tipo</th>
                                                <% statusKeys.forEach((statusKey) => { %>
                                                    <th scope="col" class="text-end"><%= statusLabels[statusKey] %></th>
                                                <% }) %>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% Object.keys(typeLabels).forEach((typeKey) => { %>
                                                <tr>
                                                    <td class="fw-semibold"><%= typeLabels[typeKey] %></td>
                                                    <% statusKeys.forEach((statusKey) => { %>
                                                        <% const statusValue = summaryStatus && summaryStatus[typeKey] ? summaryStatus[typeKey][statusKey] : 0; %>
                                                        <td class="text-end"><%= formatCurrency(statusValue) %></td>
                                                    <% }) %>
                                                </tr>
                                            <% }) %>
                                        </tbody>
                                    </table>
                                </div>
                                <div class="bg-light rounded-3 p-3 mt-auto">
                                    <div class="d-flex flex-column gap-2 small">
                                        <div class="d-flex justify-content-between">
                                            <span class="text-muted">Pagamentos liquidados</span>
                                            <span class="fw-semibold text-success"><%= formatCurrency(summaryTotals.paid) %></span>
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span class="text-muted">Pendências</span>
                                            <span class="fw-semibold text-primary"><%= formatCurrency(summaryTotals.pending) %></span>
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span class="text-muted">Atrasos</span>
                                            <span class="fw-semibold text-warning"><%= formatCurrency(summaryTotals.overdue) %></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-12">
        <div class="card card-soft responsive-panel">
            <div class="d-flex flex-wrap justify-content-between align-items-center gap-3 mb-3">
                <div>
                    <h3 class="fw-semibold mb-1">Lançamentos recentes</h3>
                    <p class="text-muted mb-0">Monitoramento contínuo de receitas, despesas e recorrências.</p>
                </div>
                <div class="d-flex flex-column flex-sm-row align-items-sm-center justify-content-end gap-2 text-sm-end">
                    <span class="badge rounded-pill bg-light text-muted">
                        <i class="bi bi-shield-lock me-2" aria-hidden="true"></i>Auditoria ativa
                    </span>
                    <div
                        class="d-flex flex-wrap align-items-center justify-content-end gap-2"
                        role="group"
                        aria-label="Exportar lançamentos financeiros"
                    >
                        <a
                            class="btn btn-outline-danger btn-sm d-inline-flex align-items-center gap-2"
                            href="/finance/export/pdf"
                            data-export-target="/finance/export/pdf"
                            data-bs-toggle="tooltip"
                            data-bs-placement="top"
                            title="Exportar lançamentos filtrados em PDF"
                            aria-label="Exportar lançamentos filtrados em PDF"
                            rel="noopener"
                        >
                            <i class="bi bi-filetype-pdf" aria-hidden="true"></i>
                            <span>Exportar PDF</span>
                        </a>
                        <a
                            class="btn btn-outline-success btn-sm d-inline-flex align-items-center gap-2"
                            href="/finance/export/excel"
                            data-export-target="/finance/export/excel"
                            data-bs-toggle="tooltip"
                            data-bs-placement="top"
                            title="Exportar lançamentos filtrados em Excel"
                            aria-label="Exportar lançamentos filtrados em Excel"
                            rel="noopener"
                        >
                            <i class="bi bi-file-earmark-spreadsheet" aria-hidden="true"></i>
                            <span>Exportar Excel</span>
                        </a>
                    </div>
                </div>
            </div>
            <div class="table-responsive table-modern responsive-table">
                <table class="table align-middle mb-0">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Descrição</th>
                            <th>Categoria</th>
                            <th>Tipo</th>
                            <th>Valor</th>
                            <th>Vencimento</th>
                            <th>Pagamento</th>
                            <th>Status</th>
                            <th class="text-center" style="width: 200px;">Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% entries.forEach(entry => { %>
                            <tr>
                                <td><%= entry.id %></td>
                                <td>
                                    <div class="d-flex flex-column">
                                        <span class="fw-semibold"><%= entry.description %></span>
                                        <% if (entry.attachments && entry.attachments.length) { %>
                                            <span class="text-muted small">
                                                <i class="bi bi-paperclip me-1" aria-hidden="true"></i>
                                                <%= entry.attachments.length %> anexo<%= entry.attachments.length > 1 ? 's' : '' %>
                                            </span>
                                        <% } %>
                                    </div>
                                </td>
                                <td>
                                    <% if (entry.category) { %>
                                        <span class="badge rounded-pill" style="background-color: <%= entry.category.color || '#6c757d' %>;" aria-hidden="true"></span>
                                        <span class="ms-2"><%= entry.category.name %></span>
                                    <% } else { %>
                                        <span class="text-muted">—</span>
                                    <% } %>
                                </td>
                                <td>
                                    <% if (entry.type === 'payable') { %>
                                        <span class="badge text-bg-danger">Pagar</span>
                                    <% } else { %>
                                        <span class="badge text-bg-success">Receber</span>
                                    <% } %>
                                </td>
                                <td>R$ <%= entry.value %></td>
                                <td><%= entry.dueDate %></td>
                                <td><%= entry.paymentDate ? entry.paymentDate : '—' %></td>
                                <td><%= entry.status %></td>
                                <td>
                                    <div class="d-flex flex-wrap justify-content-center gap-2">
                                        <button
                                            type="button"
                                            class="btn btn-outline-primary btn-sm"
                                            data-bs-toggle="modal"
                                            data-bs-target="#editFinanceModal<%= entry.id %>"
                                        >
                                            <i class="bi bi-pencil me-1"></i>Editar
                                        </button>

                                        <form
                                            action="/finance/delete/<%= entry.id %>?_method=DELETE"
                                            method="POST"
                                            class="d-inline"
                                        >
                                            <button class="btn btn-outline-danger btn-sm" type="submit">
                                                <i class="bi bi-trash me-1"></i>Excluir
                                            </button>
                                        </form>
                                    </div>

                                    <div
                                        class="modal fade"
                                        id="editFinanceModal<%= entry.id %>"
                                        tabindex="-1"
                                        aria-hidden="true"
                                    >
                                        <div class="modal-dialog">
                                            <form
                                                action="/finance/update/<%= entry.id %>?_method=PUT"
                                                method="POST"
                                                enctype="multipart/form-data"
                                                class="modal-content"
                                            >
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Editar Lançamento #<%= entry.id %></h5>
                                                    <button
                                                        type="button"
                                                        class="btn-close"
                                                        data-bs-dismiss="modal"
                                                        aria-label="Close"
                                                    ></button>
                                                </div>
                                                <div class="modal-body">
                                                    <input type="hidden" name="id" value="<%= entry.id %>" />

                                                    <div class="mb-3">
                                                        <label class="form-label">Descrição</label>
                                                        <input
                                                            type="text"
                                                            class="form-control"
                                                            name="description"
                                                            value="<%= entry.description %>"
                                                            required
                                                        />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Tipo</label>
                                                        <select class="form-select" name="type" required>
                                                            <option value="payable" <%= entry.type === 'payable' ? 'selected' : '' %>>Pagar</option>
                                                            <option value="receivable" <%= entry.type === 'receivable' ? 'selected' : '' %>>Receber</option>
                                                        </select>
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Valor (R$)</label>
                                                        <input
                                                            type="number"
                                                            step="0.01"
                                                            class="form-control"
                                                            name="value"
                                                            value="<%= entry.value %>"
                                                            required
                                                        />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Data de Vencimento</label>
                                                        <input
                                                            type="date"
                                                            class="form-control"
                                                            name="dueDate"
                                                            value="<%= entry.dueDate %>"
                                                            required
                                                        />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Data de Pagamento</label>
                                                        <input
                                                            type="date"
                                                            class="form-control"
                                                            name="paymentDate"
                                                            value="<%= entry.paymentDate ? entry.paymentDate : '' %>"
                                                        />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Status</label>
                                                        <select class="form-select" name="status">
                                                            <option value="pending" <%= entry.status === 'pending' ? 'selected' : '' %>>Pendente</option>
                                                            <option value="paid" <%= entry.status === 'paid' ? 'selected' : '' %>>Pago</option>
                                                            <option value="overdue" <%= entry.status === 'overdue' ? 'selected' : '' %>>Atrasado</option>
                                                        </select>
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Recorrência</label>
                                                        <select class="form-select" name="recurring">
                                                            <option value="true" <%= entry.recurring ? 'selected' : '' %>>Lançamento recorrente</option>
                                                            <option value="false" <%= !entry.recurring ? 'selected' : '' %>>Evento único</option>
                                                        </select>
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Intervalo de recorrência</label>
                                                    <input
                                                        type="text"
                                                        class="form-control"
                                                        name="recurringInterval"
                                                        list="recurring-interval-options"
                                                        value="<%= entry.recurringInterval || '' %>"
                                                        placeholder="Ex.: mensal, trimestral"
                                                    />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Anexos cadastrados</label>
                                                        <% if (entry.attachments && entry.attachments.length) { %>
                                                            <ul class="list-group list-group-flush rounded shadow-sm">
                                                                <% entry.attachments.forEach((attachment) => { %>
                                                                    <li class="list-group-item d-flex align-items-center justify-content-between gap-3">
                                                                        <div class="d-flex align-items-center gap-2 text-truncate">
                                                                            <i class="bi bi-paperclip text-primary" aria-hidden="true"></i>
                                                                            <span class="text-truncate" title="<%= attachment.fileName %>"><%= attachment.fileName %></span>
                                                                        </div>
                                                                        <div class="d-flex flex-column flex-sm-row align-items-sm-center gap-2 text-sm-end">
                                                                            <span class="text-muted small"><%= Math.max(1, Math.round((attachment.size || 0) / 1024)) %> KB</span>
                                                                            <a
                                                                                class="btn btn-outline-primary btn-sm"
                                                                                href="/finance/attachments/<%= attachment.id %>/download"
                                                                            >
                                                                                <i class="bi bi-download me-1" aria-hidden="true"></i>Baixar
                                                                            </a>
                                                                        </div>
                                                                    </li>
                                                                <% }); %>
                                                            </ul>
                                                        <% } else { %>
                                                            <p class="text-muted small mb-0">Nenhum anexo disponível para este lançamento.</p>
                                                        <% } %>
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label" for="entry-attachments-<%= entry.id %>">
                                                            Adicionar novos anexos
                                                        </label>
                                                        <input
                                                            type="file"
                                                            class="form-control"
                                                            id="entry-attachments-<%= entry.id %>"
                                                            name="attachments"
                                                            multiple
                                                            accept=".pdf,.png,.jpg,.jpeg,.doc,.docx,.xls,.xlsx,.csv,.txt,.zip"
                                                        />
                                                        <div class="form-text">
                                                            Anexe arquivos relevantes (até 10MB por arquivo).
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button
                                                        type="button"
                                                        class="btn btn-outline-secondary"
                                                        data-bs-dismiss="modal"
                                                    >
                                                        Cancelar
                                                    </button>
                                                    <button type="submit" class="btn btn-gradient">Salvar</button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="col-12 col-xxl-10">
        <div class="card card-soft responsive-panel">
            <h3 class="fw-semibold mb-2">Novo lançamento</h3>
            <p class="text-muted mb-4">Cadastre receitas ou despesas com recorrência opcional e acompanhe tudo no painel.</p>
            <form action="/finance/create" method="POST" enctype="multipart/form-data" class="row g-3 responsive-filter-grid">
                <div class="col-md-5">
                    <label class="form-label">Descrição</label>
                    <input
                        type="text"
                        class="form-control"
                        name="description"
                        required
                        placeholder="Ex.: Pagamento fornecedor"
                    />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Tipo</label>
                    <select class="form-select" name="type" required>
                        <option value="payable">Pagar</option>
                        <option value="receivable">Receber</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Valor (R$)</label>
                    <input
                        type="number"
                        step="0.01"
                        class="form-control"
                        name="value"
                        required
                    />
                </div>
                <div class="col-md-2">
                    <label class="form-label">Vencimento</label>
                    <input
                        type="date"
                        class="form-control"
                        name="dueDate"
                        required
                    />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Recorrência</label>
                    <select class="form-select" name="recurring">
                        <option value="false">Não recorrente</option>
                        <option value="true">Recorrente</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Intervalo (opcional)</label>
                    <input
                        type="text"
                        class="form-control"
                        name="recurringInterval"
                        list="recurring-interval-options"
                        placeholder="Ex.: mensal"
                    />
                </div>
                <div class="col-md-6">
                    <label class="form-label" for="new-entry-attachments">Anexar documentos</label>
                    <input
                        type="file"
                        class="form-control"
                        id="new-entry-attachments"
                        name="attachments"
                        multiple
                        accept=".pdf,.png,.jpg,.jpeg,.doc,.docx,.xls,.xlsx,.csv,.txt,.zip"
                    />
                    <div class="form-text">
                        Upload seguro com limite de 10MB por arquivo. Tipos aceitos: PDF, imagens e documentos do Office.
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="responsive-form-actions">
                        <button type="reset" class="btn btn-outline-secondary">Limpar</button>
                        <button type="submit" class="btn btn-gradient">Criar lançamento</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>



<script
    src="https://cdn.jsdelivr.net/npm/chart.js@4.4.4/dist/chart.umd.min.js"
    referrerpolicy="no-referrer"
    defer
></script>
<script type="application/json" id="financeBudgetState">
    <%- JSON.stringify({
        budgets: normalizedBudgetData,
        categoryConsumption: categoryConsumptionList,
        budgetMonths: computedBudgetMonths,
        activeBudgetMonth,
        budgetStatusMeta: budgetStatusSource || defaultBudgetStatus
    }) %>
</script>
<script defer src="/js/financeBudgets.js"></script>
<script>
    const rawMonthlySummary = <%- JSON.stringify(summaryMonthly) %>;
    const monthlySummaryData = Array.isArray(rawMonthlySummary) ? rawMonthlySummary : [];
    const chartCurrencyFormatter = new Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL'
    });
    const rawBudgetSummaries = <%- JSON.stringify(normalizedBudgetData) %>;
    const rawCategoryConsumption = <%- JSON.stringify(categoryConsumptionList) %>;
    const budgetStatusStyles = <%- JSON.stringify(clientBudgetStatusMeta) %>;

    document.addEventListener('DOMContentLoaded', () => {
        const filterForms = document.querySelectorAll('[data-filter-form]');
        const exportLinks = document.querySelectorAll('[data-export-target]');
        const budgetMonthSelector = document.querySelector('[data-budget-month-selector]');
        const summaryConsumptionEl = document.querySelector('[data-budget-summary="consumption"]');
        const summaryLimitEl = document.querySelector('[data-budget-summary="limit"]');
        const summaryUsageEl = document.querySelector('[data-budget-summary="usage"]');
        const categoryListEl = document.querySelector('[data-category-consumption-list]');
        const budgetChartCanvas = document.getElementById('budget-consumption-chart');
        let budgetChartInstance = null;

        const fallbackStatusMeta = {
            key: 'healthy',
            label: 'Consumo saudável',
            badgeClass: 'bg-success-subtle text-success',
            icon: 'bi-emoji-smile',
            barColor: '#10b981'
        };

        const normalizeThresholdListClient = (value) => {
            if (Array.isArray(value)) {
                const normalized = value
                    .map((entry) => {
                        if (entry === null || entry === undefined || entry === '') {
                            return null;
                        }
                        const numeric = typeof entry === 'number' ? entry : Number.parseFloat(entry);
                        return Number.isFinite(numeric) && numeric > 0 ? Number(numeric.toFixed(2)) : null;
                    })
                    .filter((entry) => entry !== null);
                const unique = Array.from(new Set(normalized));
                unique.sort((a, b) => a - b);
                return unique;
            }

            if (value === null || value === undefined || value === '') {
                return [];
            }

            return normalizeThresholdListClient([value]);
        };

        const resolveBudgetStatusKey = (consumption, limit, thresholds) => {
            const safeLimit = Number.isFinite(Number(limit)) ? Number(limit) : 0;
            const safeConsumption = Number.isFinite(Number(consumption)) ? Number(consumption) : 0;
            const normalized = normalizeThresholdListClient(thresholds);
            const ratio = safeLimit > 0 ? (safeConsumption / safeLimit) * 100 : null;

            if (ratio !== null && ratio >= 100) {
                return 'critical';
            }

            if (normalized.length) {
                const highestThreshold = normalized[normalized.length - 1];
                if (safeConsumption >= highestThreshold) {
                    return 'warning';
                }
            }

            if (ratio !== null && ratio >= 85) {
                return 'warning';
            }

            if (ratio !== null && ratio >= 60) {
                return 'caution';
            }

            return 'healthy';
        };

        const resolveThresholdStatusKey = (percentage, reached) => {
            if (Number.isFinite(percentage) && percentage >= 100) {
                return reached ? 'critical' : 'warning';
            }
            if (reached) {
                return 'warning';
            }
            if (Number.isFinite(percentage) && percentage >= 85) {
                return 'warning';
            }
            if (Number.isFinite(percentage) && percentage >= 60) {
                return 'caution';
            }
            return 'healthy';
        };

        const resolveStatusMeta = (statusKey) => {
            const source = budgetStatusStyles[statusKey] || budgetStatusStyles.healthy || fallbackStatusMeta;
            return {
                ...fallbackStatusMeta,
                ...source,
                key: source.key || statusKey || fallbackStatusMeta.key,
                badgeClass: source.badgeClass || fallbackStatusMeta.badgeClass,
                barColor: source.barColor || fallbackStatusMeta.barColor,
                label: source.label || fallbackStatusMeta.label,
                icon: source.icon || fallbackStatusMeta.icon
            };
        };

        const normalizeBudgetItem = (item = {}) => {
            const limit = Number(item?.monthlyLimit ?? 0);
            const consumption = Number(item?.consumption ?? 0);
            const thresholds = normalizeThresholdListClient(item?.thresholds);
            const remaining = Number.isFinite(Number(item?.remaining)) ? Number(item.remaining) : (limit - consumption);
            const usage = Number.isFinite(Number(item?.usage))
                ? Number(item.usage)
                : (Number.isFinite(Number(item?.percentage))
                    ? Number(item.percentage)
                    : (limit > 0 ? (consumption / limit) * 100 : 0));
            const statusKey = item?.statusStyle?.key || item?.status || item?.statusMeta?.key || 'healthy';
            const statusMeta = {
                ...resolveStatusMeta(statusKey),
                ...(item?.statusMeta || {})
            };
            statusMeta.key = statusMeta.key || statusKey;
            statusMeta.badgeClass = item?.statusMeta?.badgeClass || statusMeta.badgeClass;
            statusMeta.barColor = item?.statusMeta?.barColor || statusMeta.barColor;
            statusMeta.label = item?.statusMeta?.label || statusMeta.label;
            statusMeta.icon = item?.statusMeta?.icon || statusMeta.icon;

            return {
                ...item,
                monthlyLimit: limit,
                consumption,
                thresholds,
                remaining,
                usage,
                percentage: usage,
                statusKey: statusMeta.key,
                statusStyle: statusMeta,
                statusMeta
            };
        };

        const renderThresholdBadges = (container, dataset) => {
            if (!container) {
                return;
            }

            const thresholds = Array.isArray(dataset?.thresholds) ? dataset.thresholds : [];
            container.innerHTML = '';

            if (!thresholds.length) {
                const emptyBadge = document.createElement('span');
                emptyBadge.className = 'badge bg-light text-muted';
                emptyBadge.setAttribute('data-threshold-empty', 'true');
                emptyBadge.textContent = 'Sem limites cadastrados';
                container.appendChild(emptyBadge);
                return;
            }

            const limit = Number(dataset?.monthlyLimit) || 0;
            const consumption = Number(dataset?.consumption) || 0;

            thresholds.forEach((threshold) => {
                const numeric = Number(threshold);
                const percentage = limit > 0 ? (numeric / limit) * 100 : null;
                const reached = consumption >= numeric && numeric > 0;
                const statusKey = resolveThresholdStatusKey(percentage, reached);
                const statusMeta = resolveStatusMeta(statusKey);

                const badge = document.createElement('span');
                badge.className = `badge ${statusMeta.badgeClass || 'bg-light text-muted'} d-inline-flex align-items-center gap-1`;

                const iconEl = document.createElement('i');
                iconEl.className = `bi ${reached ? 'bi-check-circle-fill' : 'bi-flag-fill'}`;
                iconEl.setAttribute('aria-hidden', 'true');
                badge.appendChild(iconEl);

                const textEl = document.createElement('span');
                let label = chartCurrencyFormatter.format(numeric);
                if (Number.isFinite(percentage)) {
                    label += ` (${Math.round(percentage)}%)`;
                }
                textEl.textContent = label;
                badge.appendChild(textEl);

                container.appendChild(badge);
            });
        };

        const updateCardPreview = (card, dataset) => {
            if (!card || !dataset) {
                return;
            }

            const statusMeta = dataset.statusStyle || resolveStatusMeta(dataset.statusKey);
            const statusBadge = card.querySelector('[data-budget-status-badge]');
            if (statusBadge) {
                statusBadge.className = `badge ${statusMeta.badgeClass || 'bg-light text-muted'} d-inline-flex align-items-center gap-1`;
                statusBadge.setAttribute('data-status-key', statusMeta.key || dataset.statusKey || 'healthy');
                const iconEl = statusBadge.querySelector('i');
                if (iconEl) {
                    iconEl.className = `bi ${statusMeta.icon || 'bi-activity'}`;
                }
                const labelEl = statusBadge.querySelector('[data-budget-status-label]');
                if (labelEl) {
                    labelEl.textContent = statusMeta.label || 'Consumo saudável';
                } else {
                    statusBadge.textContent = statusMeta.label || 'Consumo saudável';
                }
            }

            const progressBar = card.querySelector('[data-budget-progress]');
            if (progressBar) {
                const usageValue = Number(dataset.usage) || 0;
                progressBar.style.width = `${Math.min(usageValue, 130).toFixed(1)}%`;
                if (statusMeta.barColor) {
                    progressBar.style.background = statusMeta.barColor;
                }
                progressBar.setAttribute('aria-valuenow', usageValue.toFixed(1));
            }

            const consumptionEl = card.querySelector('[data-budget-field="consumption"]');
            if (consumptionEl) {
                consumptionEl.textContent = chartCurrencyFormatter.format(Number(dataset.consumption) || 0);
            }

            const limitEl = card.querySelector('[data-budget-field="limit"]');
            if (limitEl) {
                limitEl.textContent = chartCurrencyFormatter.format(Number(dataset.monthlyLimit) || 0);
            }

            const remainingEl = card.querySelector('[data-budget-field="remaining"]');
            if (remainingEl) {
                const value = Number(dataset.remaining) || 0;
                const positiveClass = remainingEl.getAttribute('data-positive-class') || 'text-success';
                const negativeClass = remainingEl.getAttribute('data-negative-class') || 'text-danger';
                remainingEl.classList.remove(positiveClass, negativeClass);
                remainingEl.classList.add(value < 0 ? negativeClass : positiveClass);
                remainingEl.textContent = chartCurrencyFormatter.format(value);
            }

            const usageEl = card.querySelector('[data-budget-field="usage"]');
            if (usageEl) {
                const usageValue = Number(dataset.usage) || 0;
                usageEl.textContent = `${usageValue.toFixed(1)}%`;
            }

            const badgesContainer = card.querySelector('[data-threshold-badges]');
            if (badgesContainer) {
                renderThresholdBadges(badgesContainer, dataset);
            }
        };

        const buildPreviewDataset = (index, thresholdValues) => {
            const base = budgetCardsState[index];
            if (!base) {
                return null;
            }

            const normalized = normalizeThresholdListClient(thresholdValues);
            const statusKey = resolveBudgetStatusKey(base.consumption, base.monthlyLimit, normalized);
            const statusMeta = resolveStatusMeta(statusKey);

            return {
                ...base,
                thresholds: normalized,
                statusKey,
                statusStyle: statusMeta,
                statusMeta
            };
        };

        const showThresholdFeedback = (container, message, variant = 'success') => {
            const feedbackEl = container.querySelector('[data-threshold-feedback]');
            const liveEl = container.querySelector('[data-threshold-live]');
            if (!feedbackEl) {
                return;
            }

            feedbackEl.classList.remove('d-none', 'alert-success', 'alert-danger', 'alert-warning', 'alert-info');
            feedbackEl.classList.add(`alert-${variant}`);
            feedbackEl.textContent = message;

            if (liveEl) {
                liveEl.textContent = message;
            }

            if (feedbackEl.__hideTimeout) {
                clearTimeout(feedbackEl.__hideTimeout);
            }

            feedbackEl.__hideTimeout = setTimeout(() => {
                feedbackEl.classList.add('d-none');
            }, 5000);
        };

        const cardElements = Array.from(document.querySelectorAll('[data-budget-card]'));
        const budgetCardsState = cardElements.map((card, index) => {
            const source = Array.isArray(rawBudgetSummaries) ? rawBudgetSummaries[index] : null;
            const normalized = normalizeBudgetItem(source || {});
            if (!card.getAttribute('data-budget-index')) {
                card.setAttribute('data-budget-index', String(index));
            }
            return normalized;
        });
        const budgetCardsData = budgetCardsState;
        const categoryConsumptionData = Array.isArray(rawCategoryConsumption) ? [...rawCategoryConsumption] : [];

        cardElements.forEach((card, index) => {
            if (budgetCardsState[index]) {
                updateCardPreview(card, budgetCardsState[index]);
            }
        });

        const buildFiltersQuery = (scope) => {
            if (typeof URLSearchParams === 'undefined') {
                return window.location.search ? window.location.search.replace(/^\?/, '') : '';
            }

            const params = new URLSearchParams(window.location.search || '');
            const forms = scope ? [scope] : Array.from(document.querySelectorAll('[data-filter-form]'));

            forms.filter(Boolean).forEach((form) => {
                const fields = form.querySelectorAll('input[name], select[name], textarea[name]');
                fields.forEach((field) => {
                    if (!field || !field.name) {
                        return;
                    }

                    const rawValue = typeof field.value === 'string' ? field.value.trim() : field.value;
                    if (rawValue) {
                        params.set(field.name, rawValue);
                    } else {
                        params.delete(field.name);
                    }
                });
            });

            return params.toString();
        };

        const submitFormWithFilters = (form) => {
            if (!form) {
                return;
            }

            const action = form.getAttribute('action') || window.location.pathname || '/finance';
            const queryString = buildFiltersQuery(form);
            const finalUrl = queryString ? `${action}?${queryString}` : action;

            window.location.assign(finalUrl);
        };

        const applyQueryToLink = (link) => {
            const baseUrl = link.getAttribute('data-export-target');
            if (!baseUrl) {
                return;
            }

            const queryString = buildFiltersQuery();
            const finalUrl = queryString ? `${baseUrl}?${queryString}` : baseUrl;
            link.setAttribute('href', finalUrl);
        };

        const refreshExportLinks = () => {
            if (!exportLinks.length) {
                return;
            }

            exportLinks.forEach((link) => {
                applyQueryToLink(link);

                if (!link.__financeExportListenersBound) {
                    link.addEventListener('focus', () => applyQueryToLink(link));
                    link.addEventListener('mouseenter', () => applyQueryToLink(link));
                    link.addEventListener('click', () => applyQueryToLink(link));
                    link.addEventListener('auxclick', (event) => {
                        if (event.button === 1) {
                            applyQueryToLink(link);
                        }
                    });
                    link.__financeExportListenersBound = true;
                }
            });
        };

        filterForms.forEach((form) => {
            form.addEventListener('submit', (event) => {
                event.preventDefault();
                submitFormWithFilters(form);
            });

            const clearButton = form.querySelector('[data-filter-clear]');
            if (clearButton) {
                clearButton.addEventListener('click', (event) => {
                    event.preventDefault();
                    form.reset();
                    submitFormWithFilters(form);
                });
            }

            const fields = form.querySelectorAll('input[name], select[name], textarea[name]');
            fields.forEach((field) => {
                if (!field) {
                    return;
                }

                const updateExportTargets = () => refreshExportLinks();
                field.addEventListener('input', updateExportTargets);
                field.addEventListener('change', () => {
                    updateExportTargets();

                    if (field.dataset.autoSubmit === 'true') {
                        submitFormWithFilters(form);
                    }
                });
            });
        });

        refreshExportLinks();

        const chartElement = document.getElementById('financePerformanceChart');

        const formatChartMonthLabel = (value) => {
            if (!value) {
                return '';
            }

            const safeValue = String(value);
            const isoDate = `${safeValue}-01T00:00:00`;
            const parsedDate = new Date(isoDate);

            if (Number.isFinite(parsedDate.getTime())) {
                return parsedDate.toLocaleDateString('pt-BR', { month: 'short', year: 'numeric' });
            }

            const parts = safeValue.split('-');
            if (parts.length === 2) {
                return `${parts[1]}/${parts[0]}`;
            }

            return safeValue;
        };

        const renderFinanceChart = () => {
            if (!chartElement || typeof window.Chart === 'undefined') {
                return false;
            }

            const context = chartElement.getContext('2d');
            if (!context) {
                return false;
            }

            const labels = monthlySummaryData.map((item) => formatChartMonthLabel(item.month));
            const receivableData = monthlySummaryData.map((item) => {
                const value = Number.parseFloat(item?.receivable ?? 0);
                return Number.isFinite(value) ? value : 0;
            });
            const payableData = monthlySummaryData.map((item) => {
                const value = Number.parseFloat(item?.payable ?? 0);
                return Number.isFinite(value) ? value : 0;
            });

            if (chartElement.__financeChartInstance) {
                chartElement.__financeChartInstance.destroy();
            }

            chartElement.__financeChartInstance = new window.Chart(context, {
                type: 'line',
                data: {
                    labels,
                    datasets: [
                        {
                            label: 'A receber',
                            data: receivableData,
                            borderColor: '#198754',
                            backgroundColor: 'rgba(25, 135, 84, 0.15)',
                            tension: 0.35,
                            fill: true,
                            pointRadius: 4,
                            pointBackgroundColor: '#198754'
                        },
                        {
                            label: 'A pagar',
                            data: payableData,
                            borderColor: '#dc3545',
                            backgroundColor: 'rgba(220, 53, 69, 0.15)',
                            tension: 0.35,
                            fill: true,
                            pointRadius: 4,
                            pointBackgroundColor: '#dc3545'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    },
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: (context) => {
                                    const value = Number.isFinite(context.parsed?.y) ? context.parsed.y : 0;
                                    return `${context.dataset.label}: ${chartCurrencyFormatter.format(value)}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                maxRotation: 0,
                                minRotation: 0
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: (value) => {
                                    const numeric = Number(value);
                                    return chartCurrencyFormatter.format(Number.isFinite(numeric) ? numeric : 0);
                                }
                            }
                        }
                    }
                }
            });

            return true;
        };

        if (chartElement && monthlySummaryData.length) {
            const chartRendered = renderFinanceChart();
            if (!chartRendered) {
                window.addEventListener('load', renderFinanceChart, { once: true });
            }
        }
    });

        const buildBudgetKey = (item) => {
            if (!item) {
                return '::';
            }
            return `${item.budgetId ?? item.id ?? ''}::${item.categoryId ?? ''}::${item.month ?? ''}`;
        };

        const getCardKey = (card) => {
            if (!card) {
                return '::';
            }
            return `${card.getAttribute('data-budget-id') || ''}::${card.getAttribute('data-budget-category') || ''}::${card.getAttribute('data-budget-month') || ''}`;
        };

        const applyOverviewUpdate = (overview) => {
            if (!overview || typeof overview !== 'object') {
                return;
            }

            const summaries = Array.isArray(overview.summaries) ? overview.summaries : [];
            const normalizedSummaries = summaries.map((item) => normalizeBudgetItem(item));

            const summaryMap = new Map();
            normalizedSummaries.forEach((item) => {
                summaryMap.set(buildBudgetKey(item), item);
            });

            cardElements.forEach((card, index) => {
                const key = getCardKey(card);
                const updatedItem = summaryMap.get(key);
                if (updatedItem) {
                    budgetCardsState[index] = updatedItem;
                    updateCardPreview(card, updatedItem);
                }
            });

            if (Array.isArray(overview.categoryConsumption)) {
                categoryConsumptionData.length = 0;
                categoryConsumptionData.push(...overview.categoryConsumption);
            }

            if (overview.statusPalette && typeof overview.statusPalette === 'object') {
                Object.assign(budgetStatusStyles, overview.statusPalette);
            }

            updateBudgetWidgets(budgetMonthSelector?.value || 'all');
        };

        const setupThresholdEditor = (card, index) => {
            const container = card?.querySelector('[data-threshold-container]');
            if (!container) {
                return;
            }

            const toggleButton = container.querySelector('[data-threshold-toggle]');
            const form = container.querySelector('[data-threshold-form]');
            const inputsWrapper = container.querySelector('[data-threshold-inputs]');
            const addButton = container.querySelector('[data-threshold-add]');
            const cancelButton = container.querySelector('[data-threshold-cancel]');
            const submitButton = form ? form.querySelector('button[type="submit"]') : null;

            if (!form || !inputsWrapper || !toggleButton) {
                return;
            }

            let currentValues = [...(budgetCardsState[index]?.thresholds || [])];

            const createInputRow = (value = '') => {
                const row = document.createElement('div');
                row.className = 'input-group input-group-sm mb-2';
                row.innerHTML = `
                    <span class="input-group-text"><i class="bi bi-flag" aria-hidden="true"></i></span>
                    <input type="number" class="form-control" step="0.01" min="0" inputmode="decimal" value="${value !== undefined && value !== null ? value : ''}" aria-label="Valor do limite de alerta" />
                    <button type="button" class="btn btn-outline-danger" aria-label="Remover limite">
                        <i class="bi bi-x-lg" aria-hidden="true"></i>
                    </button>
                `;
                const inputEl = row.querySelector('input');
                const removeButton = row.querySelector('button');
                removeButton.addEventListener('click', () => {
                    row.remove();
                    handleInputChange();
                });
                inputEl.addEventListener('input', handleInputChange);
                return row;
            };

            const populateInputs = (values) => {
                inputsWrapper.innerHTML = '';
                if (!values.length) {
                    inputsWrapper.appendChild(createInputRow(''));
                } else {
                    values.forEach((value) => {
                        inputsWrapper.appendChild(createInputRow(value));
                    });
                }
            };

            const getInputValues = () => {
                return Array.from(inputsWrapper.querySelectorAll('input')).map((input) => input.value);
            };

            const handleInputChange = () => {
                currentValues = getInputValues();
                const preview = buildPreviewDataset(index, currentValues);
                if (preview) {
                    updateCardPreview(card, preview);
                }
            };

            const closeEditor = () => {
                form.classList.add('d-none');
                toggleButton.setAttribute('aria-expanded', 'false');
                updateCardPreview(card, budgetCardsState[index]);
            };

            const openEditor = () => {
                currentValues = [...(budgetCardsState[index]?.thresholds || [])];
                populateInputs(currentValues);
                handleInputChange();
                form.classList.remove('d-none');
                toggleButton.setAttribute('aria-expanded', 'true');
            };

            toggleButton.addEventListener('click', () => {
                if (form.classList.contains('d-none')) {
                    openEditor();
                } else {
                    closeEditor();
                }
            });

            if (cancelButton) {
                cancelButton.addEventListener('click', () => {
                    closeEditor();
                });
            }

            if (addButton) {
                addButton.addEventListener('click', () => {
                    inputsWrapper.appendChild(createInputRow(''));
                    const lastInput = inputsWrapper.querySelector('input:last-of-type');
                    if (lastInput) {
                        lastInput.focus({ preventScroll: true });
                    }
                    handleInputChange();
                });
            }

            form.addEventListener('submit', async (event) => {
                event.preventDefault();
                const dataset = budgetCardsState[index];
                if (!dataset?.budgetId) {
                    showThresholdFeedback(container, 'Não foi possível identificar o orçamento selecionado.', 'danger');
                    return;
                }

                const normalized = normalizeThresholdListClient(getInputValues());

                try {
                    [toggleButton, addButton, cancelButton, submitButton].forEach((button) => {
                        if (button) {
                            button.disabled = true;
                        }
                    });

                    const queryString = window.location.search || '';
                    const response = await fetch(`/finance/budgets/${dataset.budgetId}/thresholds${queryString}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            Accept: 'application/json'
                        },
                        body: JSON.stringify({ thresholds: normalized })
                    });

                    if (!response.ok) {
                        let message = 'Falha ao atualizar os limites.';
                        try {
                            const payload = await response.json();
                            if (payload?.message) {
                                message = payload.message;
                            }
                        } catch (err) {
                            // ignore parse errors
                        }
                        throw new Error(message);
                    }

                    const payload = await response.json();
                    if (payload?.overview) {
                        applyOverviewUpdate(payload.overview);
                    } else {
                        const statusKey = resolveBudgetStatusKey(dataset.consumption, dataset.monthlyLimit, normalized);
                        const statusMeta = resolveStatusMeta(statusKey);
                        budgetCardsState[index] = {
                            ...dataset,
                            thresholds: normalized,
                            statusKey,
                            statusStyle: statusMeta,
                            statusMeta
                        };
                        updateCardPreview(card, budgetCardsState[index]);
                        updateBudgetWidgets(budgetMonthSelector?.value || 'all');
                    }

                    currentValues = [...(budgetCardsState[index]?.thresholds || normalized)];
                    showThresholdFeedback(container, 'Limites atualizados com sucesso.', 'success');
                    closeEditor();
                } catch (error) {
                    console.error(error);
                    showThresholdFeedback(container, error.message || 'Não foi possível atualizar os limites.', 'danger');
                } finally {
                    [toggleButton, addButton, cancelButton, submitButton].forEach((button) => {
                        if (button) {
                            button.disabled = false;
                        }
                    });
                }
            });
        };

        cardElements.forEach((card, index) => {
            setupThresholdEditor(card, index);
        });

        updateBudgetWidgets(budgetMonthSelector?.value || 'all');

        if (budgetMonthSelector) {
            budgetMonthSelector.addEventListener('change', (event) => {
                updateBudgetWidgets(event.target.value || 'all');
            });
        }
    });
</script>

<%- include('../partials/footer') %>
